<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>恬淡如诗，烈火如歌</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fuersite.coding.me/"/>
  <updated>2019-08-28T01:21:26.073Z</updated>
  <id>http://fuersite.coding.me/</id>
  
  <author>
    <name>虚空生花</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JUST DO IT MY WAY</title>
    <link href="http://fuersite.coding.me/2108/02/26/home/"/>
    <id>http://fuersite.coding.me/2108/02/26/home/</id>
    <published>2108-02-26T07:40:53.000Z</published>
    <updated>2019-08-28T01:21:26.073Z</updated>
    
    <content type="html"><![CDATA[<p><span style="font-size:14px;height:30px;"><br>If you have any questions or suggestions please leave a message here and we will solve them immediately.<br></span><br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;span style=&quot;font-size:14px;height:30px;&quot;&gt;&lt;br&gt;If you have any questions or suggestions please leave a message here and we will solve them immediately.&lt;br&gt;&lt;/span&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>贝塞尔曲线javascript</title>
    <link href="http://fuersite.coding.me/2019/02/18/bezier/"/>
    <id>http://fuersite.coding.me/2019/02/18/bezier/</id>
    <published>2019-02-18T14:19:49.000Z</published>
    <updated>2019-08-28T01:21:26.072Z</updated>
    
    <content type="html"><![CDATA[<p>贝塞尔三阶曲线动画<br><a id="more"></a></p><h4 id="源码鉴赏"><a href="#源码鉴赏" class="headerlink" title="源码鉴赏"></a>源码鉴赏</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>besier 贝塞尔曲线应用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .level-1 &#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            background: rgb(125, 203, 223);</span><br><span class="line">            color: #fff;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line">        .level-2 &#123;</span><br><span class="line">            margin-top: 30px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            background: rgb(214, 100, 47);</span><br><span class="line">            color: #fff;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .level-3 &#123;</span><br><span class="line">            margin-top: 30px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            width: 100%;</span><br><span class="line">            background: rgb(12, 207, 110);</span><br><span class="line">            color: #fff;</span><br><span class="line">            position: relative;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        .level-3-ball &#123;</span><br><span class="line">            position:absolute;</span><br><span class="line">            width:16px;</span><br><span class="line">            height:16px;</span><br><span class="line">            overflow:hidden;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            background-color:#FF0000;</span><br><span class="line">            display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"level-1"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>一阶贝塞尔曲线<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"level1-ball"</span> <span class="attr">class</span>=<span class="string">"level-3-ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"level-2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>二阶贝塞尔曲线<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"level2-ball"</span> <span class="attr">class</span>=<span class="string">"level-3-ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"level-3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>三阶贝塞尔曲线<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"level3-ball"</span> <span class="attr">class</span>=<span class="string">"level-3-ball"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line">        var path1 = [];</span><br><span class="line">        var ball1 = document.getElementById("level1-ball");</span><br><span class="line"></span><br><span class="line">        var path2 = [];</span><br><span class="line">        var ball2 = document.getElementById("level2-ball");</span><br><span class="line"></span><br><span class="line">        var path3 = [];</span><br><span class="line">        var ball3 = document.getElementById("level3-ball");</span><br><span class="line">    </span><br><span class="line">        function Point2D(x,y) &#123;</span><br><span class="line">            this.x=x||0.0;</span><br><span class="line">            this.y=y||0.0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">            一阶曲线</span><br><span class="line">            P0為起始點</span><br><span class="line">            p1為第一個终点</span><br><span class="line">            t為參數值，0 &lt;= t &lt;= 1</span><br><span class="line">        */</span><br><span class="line">        function bezierLevel1( points, t ) &#123;</span><br><span class="line">            varresult = new Point2D</span><br><span class="line">            var p0 = points[0]</span><br><span class="line">            var p1 = points[1]</span><br><span class="line"></span><br><span class="line">            result.x = (1 - t) * p0.x + t * p1.x</span><br><span class="line">            result.y = (1 - t) * p0.y + t * p1.y</span><br><span class="line"></span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">            二阶曲线</span><br><span class="line">            P0為起始點</span><br><span class="line">            p1為第一個控制點</span><br><span class="line">            p2為第二個终点</span><br><span class="line">            t為參數值，0 &lt;= t &lt;= 1</span><br><span class="line">        */</span><br><span class="line">        function bezierLevel2( points, t ) &#123;</span><br><span class="line">            varresult = new Point2D</span><br><span class="line">            var p0 = points[0]</span><br><span class="line">            var p1 = points[1]</span><br><span class="line">            var p2 = points[2]</span><br><span class="line"></span><br><span class="line">            result.x = Math.pow((1 - t),2) * p0.x + 2 * t * (1 - t) * p1.x + t * t * p2.x</span><br><span class="line">            result.y = Math.pow((1 - t),2) * p0.y + 2 * t * (1 - t) * p1.y + t * t * p2.y</span><br><span class="line"></span><br><span class="line">            return result</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        /**</span><br><span class="line">            三阶曲线</span><br><span class="line">            P0為起始點</span><br><span class="line">            p1為第一個控制點</span><br><span class="line">            p2為第二個控制點</span><br><span class="line">            p3為結束點</span><br><span class="line">            t為參數值，0 &lt;= t &lt;= 1</span><br><span class="line">        */</span><br><span class="line">        function bezierLevel3( points, t ) &#123;</span><br><span class="line">            varresult = new Point2D</span><br><span class="line">            var p0 = points[0]</span><br><span class="line">            var p1 = points[1]</span><br><span class="line">            var p2 = points[2]</span><br><span class="line">            var p3 = points[3]</span><br><span class="line"></span><br><span class="line">            result.x = p0.x * Math.pow((1 - t),3) + 3 * p1.x * t * (Math.pow((1 - t),2)) +  3 * p2.x * t * t * (1 - t) + p3.x * Math.pow(t, 3)</span><br><span class="line">            result.y = p0.y * Math.pow((1 - t),3) + 3 * p1.y * t * (Math.pow((1 - t),2)) +  3 * p2.y * t * t * (1 - t) + p3.y * Math.pow(t, 3)</span><br><span class="line">        </span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function computeBezier(pointNum, path, points, bezierLevel) &#123;</span><br><span class="line">            var dt= 1.0 / ( pointNum - 1 )</span><br><span class="line">            for( var i = 0; i &lt; pointNum; i++) &#123;</span><br><span class="line">                path[i] = bezierLevel( points, i * dt )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        function setTimer(ball, path3) &#123;</span><br><span class="line">            var i = 0 </span><br><span class="line">            ball.style.left = path3[0].x + 'px'</span><br><span class="line">            ball.style.top = path3[0].y + 'px'</span><br><span class="line">            ball.style.display = 'block'</span><br><span class="line"></span><br><span class="line">            setInterval(function () &#123;</span><br><span class="line">                var j = (i&lt;100) ? i : (199-i)</span><br><span class="line">                ball.style.left = path3[j].x +'px'</span><br><span class="line">                ball.style.top = path3[j].y +'px'</span><br><span class="line">                if(++i==200)i=0</span><br><span class="line">            &#125;, 30);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 一阶</span><br><span class="line">        var points1 = [new Point2D(20, 0), new Point2D(600, 184)]</span><br><span class="line">        computeBezier(100, path1, points1, bezierLevel1)</span><br><span class="line">        setTimer(ball1, path1)</span><br><span class="line"></span><br><span class="line">        // 二阶</span><br><span class="line">        var points2 = [new Point2D(20, 160), new Point2D(100, -100), new Point2D(600, 160)]</span><br><span class="line">        computeBezier(100, path2, points2, bezierLevel2)</span><br><span class="line">        setTimer(ball2, path2)</span><br><span class="line"></span><br><span class="line">        // 三阶</span><br><span class="line">        var points3 = [new Point2D(20, 100), new Point2D(300, -100), new Point2D(600, 300), new Point2D(600, 100)]</span><br><span class="line">        computeBezier(100, path3, points3, bezierLevel3)</span><br><span class="line">        setTimer(ball3, path3)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="动画演示"><a href="#动画演示" class="headerlink" title="动画演示"></a>动画演示</h4><pre><!DOCTYPE html><html lang="en"><head><meta name="generator" content="Hexo 3.9.0">    <meta charset="UTF-8">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <meta http-equiv="X-UA-Compatible" content="ie=edge">    <title>besier 贝塞尔曲线应用</title>    <style>        .level-1 {            height: 200px;            width: 100%;            background: rgb(125, 203, 223);            color: #fff;            position: relative;        }        .level-2 {            margin-top: 30px;            height: 200px;            width: 100%;            background: rgb(214, 100, 47);            color: #fff;            position: relative;        }        .level-3 {            margin-top: 30px;            height: 200px;            width: 100%;            background: rgb(12, 207, 110);            color: #fff;            position: relative;        }        .level-3-ball {            position:absolute;            width:16px;            height:16px;            overflow:hidden;            border-radius: 50%;            background-color:#FF0000;            display: none;        }    </style></head><body>    <div class="level-1">        <span>一阶贝塞尔曲线</span>        <div id="level1-ball" class="level-3-ball"></div>    </div>    <div class="level-2">        <span>二阶贝塞尔曲线</span>        <div id="level2-ball" class="level-3-ball"></div>    </div>    <div class="level-3">        <span>三阶贝塞尔曲线</span>        <div id="level3-ball" class="level-3-ball"></div>    </div>    <script type="text/javascript">        var path1 = [];        var ball1 = document.getElementById("level1-ball");        var path2 = [];        var ball2 = document.getElementById("level2-ball");        var path3 = [];        var ball3 = document.getElementById("level3-ball");        function Point2D(x,y) {            this.x=x||0.0;            this.y=y||0.0;        }        /**            一阶曲线            P0為起始點            p1為第一個终点            t為參數值，0 <= t <= 1        */        function bezierLevel1( points, t ) {            var    result = new Point2D            var p0 = points[0]            var p1 = points[1]            result.x = (1 - t) * p0.x + t * p1.x            result.y = (1 - t) * p0.y + t * p1.y            return result        }        /**            二阶曲线            P0為起始點            p1為第一個控制點            p2為第二個终点            t為參數值，0 <= t <= 1        */        function bezierLevel2( points, t ) {            var    result = new Point2D            var p0 = points[0]            var p1 = points[1]            var p2 = points[2]            result.x = Math.pow((1 - t),2) * p0.x + 2 * t * (1 - t) * p1.x + t * t * p2.x            result.y = Math.pow((1 - t),2) * p0.y + 2 * t * (1 - t) * p1.y + t * t * p2.y            return result        }        /**            三阶曲线            P0為起始點            p1為第一個控制點            p2為第二個控制點            p3為結束點            t為參數值，0 <= t <= 1        */        function bezierLevel3( points, t ) {            var    result = new Point2D            var p0 = points[0]            var p1 = points[1]            var p2 = points[2]            var p3 = points[3]            result.x = p0.x * Math.pow((1 - t),3) + 3 * p1.x * t * (Math.pow((1 - t),2)) +  3 * p2.x * t * t * (1 - t) + p3.x * Math.pow(t, 3)            result.y = p0.y * Math.pow((1 - t),3) + 3 * p1.y * t * (Math.pow((1 - t),2)) +  3 * p2.y * t * t * (1 - t) + p3.y * Math.pow(t, 3)            return result;        }        function computeBezier(pointNum, path, points, bezierLevel) {            var dt= 1.0 / ( pointNum - 1 )            for( var i = 0; i < pointNum; i++) {                path[i] = bezierLevel( points, i * dt )            }        }        function setTimer(ball, path3) {            var i = 0             ball.style.left = path3[0].x + 'px'            ball.style.top = path3[0].y + 'px'            ball.style.display = 'block'            setInterval(function () {                var j = (i<100) ? i : (199-i)                ball.style.left = path3[j].x +'px'                ball.style.top = path3[j].y +'px'                if(++i==200)i=0            }, 30);        }        // 一阶        var points1 = [new Point2D(20, 0), new Point2D(600, 184)]        computeBezier(100, path1, points1, bezierLevel1)        setTimer(ball1, path1)        // 二阶        var points2 = [new Point2D(20, 160), new Point2D(100, -100), new Point2D(600, 160)]        computeBezier(100, path2, points2, bezierLevel2)        setTimer(ball2, path2)        // 三阶        var points3 = [new Point2D(20, 100), new Point2D(300, -100), new Point2D(600, 300), new Point2D(600, 100)]        computeBezier(100, path3, points3, bezierLevel3)        setTimer(ball3, path3)    </script></body></html></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;贝塞尔三阶曲线动画&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>docker入门实践</title>
    <link href="http://fuersite.coding.me/2019/02/18/docker/"/>
    <id>http://fuersite.coding.me/2019/02/18/docker/</id>
    <published>2019-02-18T13:58:17.000Z</published>
    <updated>2019-08-28T01:21:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>玩转docker<br><a id="more"></a></p><h2 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h2><h4 id="docker-安装完后启动服务"><a href="#docker-安装完后启动服务" class="headerlink" title="docker 安装完后启动服务"></a>docker 安装完后启动服务</h4><ul><li><p>启动 docker</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>启动docker 后台服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure></li></ul><h4 id="docker-分层构建的理解"><a href="#docker-分层构建的理解" class="headerlink" title="docker 分层构建的理解"></a>docker 分层构建的理解</h4><p>当我们运行一个容器的时候（如果不使用卷的话），我们做的任何文件修改都会被记录于容器存储层里。就是在原有镜像的基础上，再叠加上容器的存储层，并构成新的镜像。以后我们运行这个新镜像的时候，就会拥有原有容器最后的文件变化。<br>例如Dockerfile 里面定义两个 RUN 命令，两个RUN命令执行环境不一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">假设 /app 中有world.txt</span><br><span class="line">RUN cd /app</span><br><span class="line">RUN echo &quot;hello&quot; &gt; world.txt</span><br><span class="line">进行构建镜像运行后会发现 /app/world.txt 文件</span><br></pre></td></tr></table></figure></p><h4 id="宿主机与容器之间拷贝文件"><a href="#宿主机与容器之间拷贝文件" class="headerlink" title="宿主机与容器之间拷贝文件"></a>宿主机与容器之间拷贝文件</h4><ul><li>容器拷贝到宿主机<br>docker cp container_name：/data /data</li><li>宿主机拷贝到容器<br>docker cp /data container_name：/data</li></ul><h4 id="docker-build-上下文"><a href="#docker-build-上下文" class="headerlink" title="docker build 上下文"></a>docker build 上下文</h4><p><code>$ docker build -t test .</code> . 为buid的上下文目录， docker 会从上下文目录寻找Dockerfile文件。 上下文目录可以自定义 例如 <code>/home/data</code></p><h4 id="WORKDIR-lt-建立工作目录路径-gt"><a href="#WORKDIR-lt-建立工作目录路径-gt" class="headerlink" title="WORKDIR &lt;建立工作目录路径&gt;"></a>WORKDIR &lt;建立工作目录路径&gt;</h4><p>设置 <code>WORKDIR /app</code> 之后一系列操作相对路径就是 /app</p><h4 id="docker上下文-WORKDIR-COPY，-ADD-路径问题"><a href="#docker上下文-WORKDIR-COPY，-ADD-路径问题" class="headerlink" title="docker上下文 , WORKDIR, COPY， ADD 路径问题"></a>docker上下文 , WORKDIR, COPY， ADD 路径问题</h4><p>Dockerfile中 <code>COPY, ADD [源路径]：[目标路径]</code> 。</p><ul><li>源路径是相对于上下文的，image构建时候回把上下文目录内容放置到主机的docker工作区中。所以copy的源文件只能从上下文目录中获取而不是从宿主机其他路径获取。</li><li>目标路径是相对于容器的工作目录，如果没有指定WORKDIR,那么就相对于根目录。</li></ul><h4 id="共享文件"><a href="#共享文件" class="headerlink" title="共享文件"></a>共享文件</h4><ul><li><code>Dockerfile</code>中可以事先定义用来挂载的匿名卷：<code>VOLUME [&quot;/data&quot;, &quot;&lt;路径2&gt;&quot;...]</code>，dockerfile中不定义也不影响run的时候挂载</li><li><code>docker run -d -v $PWD/data:/data</code>  把宿主机<code>$PWD/data</code>文件夹挂载到容器中/data上，可以共享文件。</li><li>如果以上挂载失败，可以尝试命令 <code>docker run -d -v $PWD/data:/data --privileged=true</code>， privileged可以使得容器中的root用户拥有宿主机的root权限。</li></ul><h4 id="给容器开放多个端口"><a href="#给容器开放多个端口" class="headerlink" title="给容器开放多个端口"></a>给容器开放多个端口</h4><ul><li><p>Docckerfile 中可以<code>EXPOSE EXPOSE &lt;端口1&gt; [&lt;端口2&gt;.]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPOSE 8009</span><br><span class="line">EXPOSE 8005</span><br><span class="line">EXPOSE 8443</span><br></pre></td></tr></table></figure></li><li><p><code>docker run -p</code> &lt;宿主端口&gt;:&lt;容器端口&gt; -p &lt;容器端口&gt;… ，只能指定一个宿主端口映射到容器端口，其他端口宿主机随机映射。</p></li></ul><h4 id="如何给运行中的容器多开放一个端口"><a href="#如何给运行中的容器多开放一个端口" class="headerlink" title="如何给运行中的容器多开放一个端口"></a>如何给运行中的容器多开放一个端口</h4><ul><li>使用宿主机中的 iptables 服务，由于本人防火墙出现问题，并没有成功。具体操作自行google,百度</li></ul><h4 id="使用commit-把容器构建成镜像"><a href="#使用commit-把容器构建成镜像" class="headerlink" title="使用commit 把容器构建成镜像"></a>使用commit 把容器构建成镜像</h4><p>容器是镜像的实例，操作过程中会有很多修改，我们如果想要保存这些修改，那就把容器保存为一个镜像。</p><ul><li><code>docker commit</code> [选项] &lt;容器ID或容器名&gt; [&lt;仓库名&gt;[:&lt;标签&gt;]]</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit \</span><br><span class="line">    --author &quot;qq &lt;qq@gmail.com&gt;&quot; \</span><br><span class="line">    --message &quot;修改了默认网页&quot; \</span><br><span class="line">    webserver \</span><br><span class="line">    nginx:v2</span><br></pre></td></tr></table></figure><h4 id="ENTRYPOINT-、CMD-使用"><a href="#ENTRYPOINT-、CMD-使用" class="headerlink" title="ENTRYPOINT 、CMD 使用"></a>ENTRYPOINT 、CMD 使用</h4><ul><li><code>ENTRYPOINT 、CMD</code> 命令都会在应用运行前执行</li><li>如果Dockerfile 中同时有<code>ENTRYPOINT 、CMD</code>，执行时会变成 <entrypoint> “<cmd>“，拼接在一起。</cmd></entrypoint></li><li>构建事使用命令覆盖Dockerfile中的CMD， <code>docker run -it ubuntu</code> 是默认接的CMD命令 <code>/bin/bash</code>: 即 <code>docker run -it ubuntu /bin/bash</code>，也可以替换其他命令例 <code>cat /etc/os-release</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;玩转docker&lt;br&gt;
    
    </summary>
    
      <category term="server" scheme="http://fuersite.coding.me/all-categories/server/"/>
    
    
      <category term="docker" scheme="http://fuersite.coding.me/all-tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SSE - 服务端推送</title>
    <link href="http://fuersite.coding.me/2018/12/01/SSE/"/>
    <id>http://fuersite.coding.me/2018/12/01/SSE/</id>
    <published>2018-12-01T00:53:18.000Z</published>
    <updated>2019-08-28T01:21:26.071Z</updated>
    
    <content type="html"><![CDATA[<p>Using server-sent events</p><a id="more"></a><h2 id="SSE-单向消息传递"><a href="#SSE-单向消息传递" class="headerlink" title="SSE- 单向消息传递"></a>SSE- 单向消息传递</h2><p>Server-Sent 事件指的是网页自动获取来自服务器的更新。所有主流浏览器均支持服务器发送事件，除了 Internet Explorer。</p><h2 id="检测-Server-Sent-事件支持"><a href="#检测-Server-Sent-事件支持" class="headerlink" title="检测 Server-Sent 事件支持"></a>检测 Server-Sent 事件支持</h2><pre><code>if(typeof(EventSource)!==&quot;undefined&quot;){    // 浏览器支持 Server-Sent    // 一些代码.....}else{    // 浏览器不支持 Server-Sent..}</code></pre><h2 id="客户端接收消息"><a href="#客户端接收消息" class="headerlink" title="客户端接收消息"></a>客户端接收消息</h2><pre><code>var source=new EventSource(&quot;http://127.0.0.1/sse&quot;);source.onmessage=function(event){    console.log(&apos;event.data========  &apos;,event.data)}</code></pre><h2 id="服务端推送消息-Node版"><a href="#服务端推送消息-Node版" class="headerlink" title="服务端推送消息 - Node版"></a>服务端推送消息 - Node版</h2><pre><code>    var http = require(&quot;http&quot;);    var fs = require(&apos;fs&apos;)    http.createServer(function (req, res) {        var fileName = &quot;.&quot; + req.url;        if (fileName === &quot;./sse&quot;) {            res.writeHead(200, {&quot;Content-Type&quot;:&quot;text/event-stream&quot;,                                 &quot;Cache-Control&quot;:&quot;no-cache&quot;,                                 &quot;Connection&quot;:&quot;keep-alive&quot;});            res.write(&quot;retry: 6000\n&quot;);            res.write(&quot;data: &quot; + (new Date()) + &quot;\n\n&quot;);            interval = setInterval(function() {                res.write(&quot;data: &quot; + (new Date()) + &quot;\n\n&quot;);            }, 6000);            req.connection.addListener(&quot;close&quot;, function () {                console.log(&apos;customer close&apos;)                clearInterval(interval);            }, false);            return    }    res.end(fs.readFileSync(&apos;./index.html&apos;))    console.log(&apos;listening.......&apos;)    }).listen(80, &quot;127.0.0.1&quot;);代码解释:- 把报头 &quot;Content-Type&quot; 设置为 &quot;text/event-stream&quot;- 规定不对页面进行缓存- 输出发送数据（始终以 &quot;data: &quot; 开头）</code></pre><h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><p>onmessage： 默认接收消息事。也可以自定义接收事件，自定义消息事件后，服务端向指定监听的事件推送消息，这时候onmessage事件就会屏蔽。</p><ul><li><p>客户端</p><pre><code>source.addEventListener(&apos;timeMessage&apos;, function(event){    console.log(&apos;自定义消息事件------------&apos;,event.data)}, false)</code></pre></li></ul><ul><li><p>服务端</p><pre><code>interval = setInterval(function() {    res.write(&quot;event: timeMessage\n&quot;);    res.write(&quot;data: &quot; + (new Date()) + &quot;\n\n&quot;);}, 6000);</code></pre></li></ul><h2 id="字段定义解析"><a href="#字段定义解析" class="headerlink" title="字段定义解析"></a>字段定义解析</h2><ul><li><p>data：数据栏</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">单行以\n\n结尾</span><br><span class="line">data:  message\n\n</span><br><span class="line"></span><br><span class="line">多行以\n换行，最后一行以\n\n结尾</span><br><span class="line">data: begin message\n</span><br><span class="line">data: continue message\n\n</span><br><span class="line"></span><br><span class="line">以发送JSON格式的数据为例。</span><br><span class="line">data: &#123;\n</span><br><span class="line">data: &quot;name&quot;: &quot;ivin&quot;,\n</span><br><span class="line">data: &#125;\n\n</span><br></pre></td></tr></table></figure></li><li><p>id：数据标识符</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">id: msg1\n</span><br><span class="line">data: message\n\n</span><br><span class="line">浏览器用lastEventId属性读取这个值。一旦连接断线，浏览器会发送一个HTTP头，里面包含一个特殊的“Last-Event-ID”头信息，将这个值发送回来，用来帮助服务器端重建连接。因此，这个头信息可以被视为一种同步机制。</span><br></pre></td></tr></table></figure></li><li><p>event栏：自定义信息类型</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">event: foo\n</span><br><span class="line">data: a foo event\n\n</span><br><span class="line"></span><br><span class="line">自定义foo事件，触发浏览器端的foo事件；默认类型，触发浏览器端的message事件。</span><br></pre></td></tr></table></figure></li><li><p>retry：最大间隔时间</p><p>  服务端设置客户端重连的间隔时间，当服务端断开之后，客户端监听了断开后，会间隔retry设定的时间进行重连。</p></li></ul><p>参考</p><blockquote><p><a href="https://www.cnblogs.com/goody9807/p/4257192.html" target="_blank" rel="noopener">https://www.cnblogs.com/goody9807/p/4257192.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Using server-sent events&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="SSE" scheme="http://fuersite.coding.me/all-tags/SSE/"/>
    
  </entry>
  
  <entry>
    <title>XSS,CSRF-前端安全</title>
    <link href="http://fuersite.coding.me/2018/11/25/XSS,CSRF%20-%20%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <id>http://fuersite.coding.me/2018/11/25/XSS,CSRF - 前端安全问题/</id>
    <published>2018-11-25T02:26:08.000Z</published>
    <updated>2019-08-28T01:21:26.072Z</updated>
    
    <content type="html"><![CDATA[<p>XSS,CSRF前端安全问题讲解<br><a id="more"></a></p><h2 id="XSS定义"><a href="#XSS定义" class="headerlink" title="XSS定义"></a>XSS定义</h2><p>XSS, （Cross Site Scripting）, 中文名为跨站脚本, 本质上是在页面上嵌入恶意代码，实施攻击。</p><h3 id="XSS攻击方式"><a href="#XSS攻击方式" class="headerlink" title="XSS攻击方式"></a>XSS攻击方式</h3><ul><li><p>反射型攻击，在http请求，或者一些图片链接，link的url中嵌入恶意代码，提交给服务器，服务器再返回给前端页面当中，实现攻击行为。</p></li><li><p>存储型攻击, 跟反射型攻击方式相同，不过它是把恶意代码保存到服务器的数据库或者文件系统当中，之后如果用户操作，比如一些查询，就会把恶意代码查询出来，如果前端没有过滤转换很可能就会执行恶意代码， 或者攻击者可以通过这种方式获取用户cookie保存到自己服务器。</p></li><li><p>DOM XSS, DOM XSS攻击不需要服务器端的解析响应的直接参与，而是通过浏览器端的DOM解析。这完全是客户端的事情。比如 eval 能把字符串转为js执行语句。</p></li></ul><h3 id="XSS预防"><a href="#XSS预防" class="headerlink" title="XSS预防"></a>XSS预防</h3><ul><li>对cookie的保护<ol><li>对重要的cookie设置httpOnly, 防止客户端通过document.cookie读取cookie。服务端可以设置此字段。</li></ol></li><li>对用户输入数据的处理<ol><li>编码：不能对用户输入的内容都保持原样，对用户输入的数据进行字符实体编码。</li><li>解码：原样显示内容的时候必须解码.</li><li>过滤：把输入的一些不合法的东西都过滤掉，从而保证安全性。如移除用户上传的DOM属性，如onerror，移除用户上传的Style节点，iframe, script节点等。</li></ol></li></ul><h2 id="CSRF定义"><a href="#CSRF定义" class="headerlink" title="CSRF定义"></a>CSRF定义</h2><p>CSRF,(Cross-site request forgery)跨站点请求伪造，因为http请求是一种无状态的，服务端会使用session保存用户登录状态及一些校验信息。而前端一般都会使用cookie存放一些session信息每次http请求都会携带过去作为校验。CSRF就是利用这一点，把cookie信息拿过去，发送http请求达到入侵功能。</p><p>例如：</p><ol><li>用户登录A网站，并生成cookie信息。</li><li>用户在没有登出A网站情况，打开恶意网站B。如果网站B有一个操作是向A网站服务器发送http请求的，这时候cookie信息也会携带过去成功访问。</li></ol><h3 id="CSRF-攻击网站"><a href="#CSRF-攻击网站" class="headerlink" title="CSRF 攻击网站"></a>CSRF 攻击网站</h3><ul><li>在用户登录A网站前提下，B网站访问 A网站接口，获取信息，或者插入恶意信息。</li></ul><h3 id="CSRF预防"><a href="#CSRF预防" class="headerlink" title="CSRF预防"></a>CSRF预防</h3><ul><li>通过 referer(有效,不一定可靠，可以为空，也可以伪造)、token(足够随机性，放到表单设置hiden中提交或者放到headers中提交给服务端校验) 或者 验证码（有效但是，用户体验不好） 来检测用户提交。</li><li>尽量不要在页面的链接中暴露用户隐私信息。</li><li>对于用户修改删除等操作最好都使用post 操作。</li><li>避免全站通用的cookie，严格设置cookie的域。</li></ul><p>参考</p><blockquote><p><a href="https://www.cnblogs.com/shytong/p/5308667.html" target="_blank" rel="noopener">https://www.cnblogs.com/shytong/p/5308667.html</a><br><a href="https://www.cnblogs.com/unclekeith/p/7750681.html" target="_blank" rel="noopener">https://www.cnblogs.com/unclekeith/p/7750681.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;XSS,CSRF前端安全问题讲解&lt;br&gt;
    
    </summary>
    
    
      <category term="前端安全" scheme="http://fuersite.coding.me/all-tags/%E5%89%8D%E7%AB%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="CSRF" scheme="http://fuersite.coding.me/all-tags/CSRF/"/>
    
      <category term="XSS" scheme="http://fuersite.coding.me/all-tags/XSS/"/>
    
  </entry>
  
  <entry>
    <title>async await promise 理解与使用</title>
    <link href="http://fuersite.coding.me/2018/11/06/promise/"/>
    <id>http://fuersite.coding.me/2018/11/06/promise/</id>
    <published>2018-11-06T15:12:56.000Z</published>
    <updated>2019-08-28T01:21:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>async, await, promise 之间关系<br><a id="more"></a></p><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><ul><li>一个promise的三种状态 pending、resolve、rejected 从字面量应该能够理解他们的意思</li><li>promise 会返回resolve 或者reject</li><li>promise必须实现then方法，then方法可以拿到promise里面返回的内容，不论成功或者失败</li></ul><h4 id="async"><a href="#async" class="headerlink" title="async"></a>async</h4><ul><li>返回一个 promise对象</li></ul><h4 id="await"><a href="#await" class="headerlink" title="await"></a>await</h4><ul><li>获取promise对象里面的内容</li></ul><h4 id="理解性例子"><a href="#理解性例子" class="headerlink" title="理解性例子"></a>理解性例子</h4><pre><code>&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;    &lt;meta charset=&quot;utf-8&quot; /&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;title&gt;ivin&lt;/title&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;/head&gt;&lt;body&gt;    &lt;script&gt;        async function async1() {            return &apos;I am promise.resolve 1&apos;        }        async function async2() {            const data = await async1()            return data        }         async function async3 () {            const data = await async2()            console.log(data)        }        async3()        function getPromise() {            return new Promise((resolve, reject) =&gt; {                resolve(&apos;I am promise.resolve 2&apos;)            })        }        async function async4() {            const data = await getPromise()            console.log(data)        }        async4()        async function rejectPromise1(flag) {            if (flag) {                return &apos;I am promise.resolve&apos;            } else {                throw &apos;I am promise.reject 1&apos;            }        }        rejectPromise1().then((data)=&gt;{            console.log(&apos;reject 不会进入我这里&apos;, data)        }).catch((err)=&gt; {            console.log(err)        })        async function rejectPromise2() {            return new Promise((resolve, reject) =&gt; {                reject(&apos;I am promise.reject 2&apos;)            })        }        async function async5() {            try {                const data = await rejectPromise2()            } catch (err) {                console.log(err)            }            console.log(&apos;如果没有try catch 就不会执行我。。。。。。。 reject 2&apos;)        }        async5()        rejectPromise1(false).then((resolve)=&gt; {            console.log(&apos;--------resolev&apos;, resolve)        }, (reject)=&gt; {            console.log(&apos;--------reject&apos;, reject)        })    &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>执行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">--------reject I am promise.reject 1</span><br><span class="line">asyn.html:50 I am promise.reject 1</span><br><span class="line">asyn.html:34 I am promise.resolve 2</span><br><span class="line">asyn.html:63 I am promise.reject 2</span><br><span class="line">asyn.html:65 如果没有try catch 就不会执行我。。。。。。。 reject 2</span><br><span class="line">asyn.html:21 I am promise.resolve 1</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;async, await, promise 之间关系&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="promise" scheme="http://fuersite.coding.me/all-tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>前端SEO优化 - 单页面应用SEO优化</title>
    <link href="http://fuersite.coding.me/2018/10/16/seo%E4%BC%98%E5%8C%96/"/>
    <id>http://fuersite.coding.me/2018/10/16/seo优化/</id>
    <published>2018-10-16T13:43:08.000Z</published>
    <updated>2019-08-28T01:21:26.075Z</updated>
    
    <content type="html"><![CDATA[<p>爬虫原理，seo优化，单页应用seo优化问题<br><a id="more"></a></p><h2 id="爬虫原理"><a href="#爬虫原理" class="headerlink" title="爬虫原理"></a>爬虫原理</h2><ul><li><p>什么是爬虫？<br>是一种网络机器人，机器人会通过各种途径获取到需要爬取的网站url，暂存url种子库中并在适当时候进行访问你的url<code>（发送http/https请求）</code>。如果你网站内容被成功收录，那么说明你的SEO做的很成功</p></li><li><p>爬虫爬取方式<br>网络爬虫的爬行策略分为深度优先和广度优先。</p><ol><li><p>深度优先<br>深度优先搜索策略从起始网页开始，选择一个URL进入，分析这个网页中的URL，选择一个再进入。如此一个链接一个链接地抓取下去，直到处理完一条路线之后再处理下一条路线。深度优先策略设计较为简单。然而门户网站提供的链接往往最具价值，PageRank也很高，但每深入一层，网页价值和PageRank都会相应地有所下降。这暗示了重要网页通常距离种子较近，而过度深入抓取到的网页却价值很低。同时，这种策略抓取深度直接影响着抓取命中率以及抓取效率，对抓取深度是该种策略的关键。</p></li><li><p>广度优先<br>广度优先搜索策略是指在抓取过程中，在完成当前层次的搜索后，才进行下一层次的搜索。该算法的设计和实现相对简单。在目前为覆盖尽可能多的网页，一般使用广度优先搜索方法。也有很多研究将广度优先搜索策略应用于聚焦爬虫中。其基本思想是认为与初始URL在一定链接距离内的网页具有主题相关性的概率很大。另外一种方法是将广度优先搜索与网页过滤技术结合使用，先用广度优先策略抓取网页，再将其中无关的网页过滤掉。这些方法的缺点在于，随着抓取网页的增多，大量的无关网页将被下载并过滤，算法的效率将变低。</p></li></ol></li></ul><h2 id="SEO优化基础知识"><a href="#SEO优化基础知识" class="headerlink" title="SEO优化基础知识"></a>SEO优化基础知识</h2><ul><li><p>语义化html标签</p><ol><li>语义化标签是指标签本身具有意义，例如： <code>&lt;title&gt;</code>标签，能够让人一眼看出此标签用作标题，可阅读性强。</li><li><p>常使用语义化标签</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;：页面主体内容。</span><br><span class="line">&lt;hn&gt;：h1~h6，分级标题，&lt;h1&gt; 与 &lt;title&gt; 协调有利于搜索引擎优化。</span><br><span class="line">&lt;ul&gt;：无序列表。</span><br><span class="line">&lt;li&gt;：有序列表。</span><br><span class="line">&lt;header&gt;：页眉通常包括网站标志、主导航、全站链接以及搜索框。</span><br><span class="line">&lt;nav&gt;：标记导航，仅对文档中重要的链接群使用。</span><br><span class="line">&lt;main&gt;：页面主要内容，一个页面只能使用一次。如果是web应用，则包围其主要功能。</span><br><span class="line">&lt;article&gt;：定义外部的内容，其中的内容独立于文档的其余部分。</span><br><span class="line">&lt;section&gt;：定义文档中的节（section、区段）。比如章节、页眉、页脚或文档中的其他部分。</span><br><span class="line">&lt;aside&gt;：定义其所处内容之外的内容。如侧栏、文章的一组链接、广告、友情链接、相关产品列表等。</span><br><span class="line">&lt;footer&gt;：页脚，只有当父级是body时，才是整个页面的页脚。</span><br><span class="line">&lt;small&gt;：呈现小号字体效果，指定细则，输入免责声明、注解、署名、版权。</span><br><span class="line">&lt;strong&gt;：和 em 标签一样，用于强调文本，但它强调的程度更强一些。</span><br><span class="line">&lt;em&gt;：将其中的文本表示为强调的内容，表现为斜体。</span><br><span class="line">&lt;mark&gt;：使用黄色突出显示部分文本。</span><br><span class="line">&lt;figure&gt;：规定独立的流内容（图像、图表、照片、代码等等）（默认有40px左右margin）。</span><br><span class="line">&lt;figcaption&gt;：定义 figure 元素的标题，应该被置于 figure 元素的第一个或最后一个子元素的位置。</span><br><span class="line">&lt;cite&gt;：表示所包含的文本对某个参考文献的引用，比如书籍或者杂志的标题。</span><br><span class="line">&lt;blockquoto&gt;：定义块引用，块引用拥有它们自己的空间。</span><br><span class="line">&lt;q&gt;：短的引述（跨浏览器问题，尽量避免使用）。</span><br><span class="line">&lt;time&gt;：datetime属性遵循特定格式，如果忽略此属性，文本内容必须是合法的日期或者时间格式。</span><br><span class="line">&lt;abbr&gt;：简称或缩写。</span><br><span class="line">&lt;dfn&gt;：定义术语元素，与定义必须紧挨着，可以在描述列表dl元素中使用。</span><br><span class="line">&lt;address&gt;：作者、相关人士或组织的联系信息（电子邮件地址、指向联系信息页的链接）。</span><br><span class="line">&lt;del&gt;：移除的内容。</span><br><span class="line">&lt;ins&gt;：添加的内容。</span><br><span class="line">&lt;code&gt;：标记代码。</span><br><span class="line">&lt;meter&gt;：定义已知范围或分数值内的标量测量。（Internet Explorer 不支持 meter 标签）</span><br><span class="line">&lt;progress&gt;：定义运行中的进度（进程）。</span><br><span class="line"></span><br><span class="line">&lt;&gt;：</span><br><span class="line"></span><br><span class="line">&lt;&gt;：</span><br></pre></td></tr></table></figure></li></ol></li><li><p>html标签的权重</p><ol><li>HTML的不同标签在SEO优化中的权重分数不同</li><li>HTML标签权重分值排列<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">内部链接(`&lt;a href=&quot; http://www.yahoo.com&quot;&gt;雅虎&lt;/a&gt;`)文字：10分</span><br><span class="line">标题title：10分 </span><br><span class="line">域名：7分 </span><br><span class="line">H1，H2字号标题：5分 </span><br><span class="line">每段首句：5分 </span><br><span class="line">路径或文件名：4分 </span><br><span class="line">相似度（关键词堆积）：4分 </span><br><span class="line">每句开头：1.5分 </span><br><span class="line">加粗或斜体：1分 </span><br><span class="line">文本用法（内容）：1分 </span><br><span class="line">title属性：如a href=… title= </span><br><span class="line">alt标记：0.5分 </span><br><span class="line">Meta描述（Description属性）：0.5分 </span><br><span class="line">Meta关键词（Keywords属性）：0.05分</span><br></pre></td></tr></table></figure></li></ol></li><li><p>外链<br>外链是指自己网站的链接放到第三方网站，这样如果爬虫爬取第三方网站时候也会爬取到自己的网站内容，一般我们会选择一些热门网站外置外链，增加自己网站的访问量。</p></li><li><p>robots.txt<br><code>robots</code> 是网站跟爬虫间的协议，用简单直接的txt格式文本方式告诉对应的爬虫被允许的权限，也就是说robots.txt是搜索引擎中访问网站的时候要查看的第一个文件。当一个搜索蜘蛛访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">User-agent: Baiduspider  // 指定搜索引擎 * 表示所有</span><br><span class="line">Aallow: /home  //允许爬取的路由</span><br><span class="line">Disallow: /user //禁止爬取的路由</span><br><span class="line">Sitemap: http://domain.com/sitemap.xml //指定站点地图</span><br></pre></td></tr></table></figure></li><li><p>sitemap<br>sitemap是引导蜘蛛抓取网站内容的最为有效的方式之一, 可以在robots.txt 指定sitemap地址，让爬虫先收录sitemap里面的url，之后再引导爬取。也可以主动提交sitemap.xml到搜索引擎站点， 例如百度站长</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;urlset xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;</span><br><span class="line">    &lt;url&gt;</span><br><span class="line">      &lt;loc&gt;http://fuersite.coding.me/2018/10/16/seo%E4%BC%98%E5%8C%96/&lt;/loc&gt;</span><br><span class="line">      &lt;lastmod&gt;2018-11-15T23:59:58.262Z&lt;/lastmod&gt;</span><br><span class="line">      &lt;data&gt;</span><br><span class="line">          &lt;display&gt;</span><br><span class="line">          &lt;title&gt;前端SEO优化-单页面应用SEO优化&lt;/title&gt;</span><br><span class="line">          &lt;pubTime&gt;2018-10-16T13:43:08.000Z&lt;/pubTime&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;tag&gt;SEO&lt;/tag&gt;</span><br><span class="line">          </span><br><span class="line">          &lt;tag&gt;前端SEO优化&lt;/tag&gt;</span><br><span class="line">          </span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line">            </span><br><span class="line">              &lt;breadCrumb title=&quot;javascript&quot; url=&quot;http://fuersite.coding.me/all-categories/javascript/&quot;/&gt;</span><br><span class="line">          </span><br><span class="line">        &lt;/display&gt;</span><br><span class="line">      &lt;/data&gt;</span><br><span class="line">    &lt;/url&gt;</span><br><span class="line">  &lt;/urlset&gt;</span><br></pre></td></tr></table></figure></li><li><p>关键词排名<br>你的网站的有很多被收录的关键词，当你的网站外链很多，访问量很大的时候，你网站中的关键词排名就会得到恨到提升。</p></li><li><p>传统静态页面与单页面应用</p><ol><li>传统静态页面，多个入口，每个url对应一个静态页面文件, 易于SEO。</li><li>单页面应用，一个index.html 入口文件，各个路由对应页面内容是浏览器通过js进行渲染出来的，爬虫能够爬取到的只有index.html和js文件引用。</li></ol></li></ul><h2 id="如何让搜索引擎知道，并且爬取网站？"><a href="#如何让搜索引擎知道，并且爬取网站？" class="headerlink" title="如何让搜索引擎知道，并且爬取网站？"></a>如何让搜索引擎知道，并且爬取网站？</h2><p>  在网站建立初期，如果不做一些SEO处理，网站很难被搜索引擎搜索出来。</p><ul><li>大量经常性访问站点，提高某些关键词访问热度，引起搜索引擎发现，进行爬取收录。（速度太慢，见效差）</li><li>在热门站点添加外链，热门论坛博客都可以。增加爬虫爬取链接机会。（速度快，可能需要某些费用）</li><li>蹭热度，在网站某些关键词，链接文字使用当前网络中热度文字。（热门词不一定跟网站关键字相近，造成网站主题不明确）</li><li>主动提交网站链接到搜索引擎站点，例如百度站长。把sitemap.xml主动提交站点，一般隔天就回去爬取 （网站更新，都要重新提交）</li></ul><h2 id="如何优化网站，有利于爬虫爬取？"><a href="#如何优化网站，有利于爬虫爬取？" class="headerlink" title="如何优化网站，有利于爬虫爬取？"></a>如何优化网站，有利于爬虫爬取？</h2><ul><li>html标签的优化，尽量使用语义化，图片，链接优化。</li><li>网站标题、关键字、描述优化。</li><li>利用爬虫原理，页面当中添加其他链接，但是要避免回路。</li><li>网站增加robots.tx ,爬虫最新爬取到它。</li><li>编写sitemap.xml引导爬虫。</li><li>网站结构布局优化，采用用扁平化结构-网站的目录层级要尽可能少，中小型网站不要超过3级。</li></ul><h2 id="单页面应用SEO优化"><a href="#单页面应用SEO优化" class="headerlink" title="单页面应用SEO优化"></a>单页面应用SEO优化</h2><p>  前后端分离开发在开发效率上确实很大提升，但是确不利于SEO。单页面应用只有一个入口，其他路由都是浏览器加载js后渲染出来的，也就是说爬虫访问http是获取到的只是一个入口文件。</p><h3 id="SPA-SEO优化方式无非是两种："><a href="#SPA-SEO优化方式无非是两种：" class="headerlink" title="SPA SEO优化方式无非是两种："></a>SPA SEO优化方式无非是两种：</h3><ul><li>采用ssr（服务端渲染）<br>服务端渲染就是在服务器端组装页面和数据再返回html页面给前端， 传统的web应用就是这样的。</li><li><p>phantomjs/puppeteer  （预渲染）</p><ol><li><p>PhantomJS是一个基于webkit的JavaScript API。它使用QtWebKit作为它核心浏览器的功能，使用webkit来编译解释执行JavaScript代码。任何你可以在基于webkit浏览器做的事情，它都能做到。 puppeteer也是类似的库。</p></li><li><p>预渲染是指给单页面应用的路由预先生成一个html页面，里面一些预先需要做seo的信息数据（title,meta 等等），真正的服务端数据还是要等到浏览器渲染之后发起ajax请求获取数据。</p></li><li><p>vue 预渲染插件<code>prerender-spa-plugin</code> 里面的 <code>puppeteer</code>包就是使用chromium 引擎来预渲染页面。因为chrome引擎包很大，而且需要翻墙,可以使用淘宝镜像下载，或者单独下载放入<code>puppeteer</code> 下面的.local-chromium<br>文件夹下。</p></li></ol></li></ul><p>参考</p><blockquote><p><a href="https://blog.csdn.net/JasonHector/article/details/79164767" target="_blank" rel="noopener">https://blog.csdn.net/JasonHector/article/details/79164767</a><br><a href="https://blog.csdn.net/eeeecw/article/details/80591511" target="_blank" rel="noopener">https://blog.csdn.net/eeeecw/article/details/80591511</a><br><a href="https://www.jianshu.com/p/8f82459895c9" target="_blank" rel="noopener">https://www.jianshu.com/p/8f82459895c9</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;爬虫原理，seo优化，单页应用seo优化问题&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="SEO" scheme="http://fuersite.coding.me/all-tags/SEO/"/>
    
      <category term="前端SEO优化" scheme="http://fuersite.coding.me/all-tags/%E5%89%8D%E7%AB%AFSEO%E4%BC%98%E5%8C%96/"/>
    
      <category term="单页面应用SEO优化" scheme="http://fuersite.coding.me/all-tags/%E5%8D%95%E9%A1%B5%E9%9D%A2%E5%BA%94%E7%94%A8SEO%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>vue架构</title>
    <link href="http://fuersite.coding.me/2018/08/12/vue%E6%9E%B6%E6%9E%84/"/>
    <id>http://fuersite.coding.me/2018/08/12/vue架构/</id>
    <published>2018-08-12T13:46:44.000Z</published>
    <updated>2019-08-28T01:21:26.075Z</updated>
    
    <content type="html"><![CDATA[<p>vue 登录权限，项目架构，代码规范，网络安全<br><a id="more"></a></p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h5 id="1-再次进入免登录"><a href="#1-再次进入免登录" class="headerlink" title="1. 再次进入免登录"></a>1. 再次进入免登录</h5><p>一、 为了方便用户使用，有时候我们会设置免登陆功能，即是在用户登录过一次之后在有效期之内都可以不需要重新登录，直接进入应用。实现方式：在用户登录之后获取到用户一些基本信息，这时候我们可以存放一些基本用户信息或者token之类的数据到cookie当中并且设置有效期。并在路由监听是否已经登录过,获取cookie中的用户信息，如果过期或者不存在则重新登录， 每次登出时记得清掉cookie</p><pre><code>vueRouter.beforeEach((to, from, next) =&gt; {  const userInfo = user.getUserInfo()  if (!userInfo &amp;&amp; to.path != &apos;/login&apos;) {    vueRouter.replace(&apos;/login&apos;)  }  if (to.path === &apos;/login&apos;) {    Cookie.clearUserInfo()    next()  }  else {    next()  }  })</code></pre><p>二、服务端登录，持续登录<br>要想更好的做登录还需要了解后端是如果做登录， 登录的方式有账号密码登录，还有第三方登录，当用户登录匹配成功之后服务器返回唯一性的sessionId和accessToken一般会存放到cookie当中，用户访问其他接口时会携带sessionId跟accessToken给服务端，服务端会判断当前用户是否登录或者accessToken是否过期，过期则需要重新登录。这是一个大概的流程，下面我们了解一个一些知识点。</p><p>1) sessionId 跟accessToken是什么时候生成的？<br>用户首次登录时候，会对用户登录账户密码进行校验，校验成功后，服务端给用户生成一个唯一的sessionId跟accessToken，如何生成不重要，重要的是给用户一个唯一的标识，sessionId存放到服务端的session当中,token存放到数据库中，最后在把sessionId和accessToken存到cookie当中。</p><p>2）session是什么？<br>session是服务端用来存放用户数据的类hashTable的结构</p><p>3）为什么最后还要把sessionId和accessToken存放到cookie当中？<br>用户登录后，服务端往cookie中存放sessionId和accessToken，等到用户调用其他接口是会携带回来，这时候服务端会从cookie当中拿出来判断是哪个用户，是否过期。如果没有则让用户登录。</p><p>4）有了sessionId为什么还要accessToken?<br>sessionId主要目的是用来判断用户登录状态，生成sessionId和accessToken时候会设置有效期，当sessionId过期时就可以用accessToken校验用户信息。当用户关闭浏览器之后sessionId就不在浏览器的cookie当中了，这时候访问服务端是服务器拿不到sessionId这就可以使用accessToken校验，并且生成信息sessionId.</p><p>5) 关掉浏览器之后session会过期吗？<br>其实关掉浏览器跟session过期没有什么关系。前面所说的关掉浏览器，找不到session是因为sessionId存的cookie叫做会话cookie（没有设置过期时间，浏览器关闭即销毁）。</p><p>6）accessToken会过期吗？<br>一般我们会设置过期时间，到期后重新登录，生成新的accessToken,我们一般会设置的accessToken过期时间比sessionId长。</p><p>三、回到之前的前端免登录<br>在我们了解了后端登录流程之后，我们是不是要考虑一个问题，那就是用户sessionId或者accessToKen过期之后我们怎么重登录呢？<br>这时候就需要我们监听ajax请求返回的code，服务端会指定code，我们拿到code(例如 401)值后就需要让用户重新登录。</p><p>例如:我这里使用的是axios</p><pre><code>axios.interceptors.response.use(  response =&gt; {    if(response.data.code == 401) {      router.push({        path: &apos;/login&apos;,        query: {redirect: router.currentRoute.fullPath}      })    }    return Promise.resolve(response);  },  error =&gt; {    return Promise.reject(error)  });</code></pre><h5 id="2-用户登录权限控制"><a href="#2-用户登录权限控制" class="headerlink" title="2. 用户登录权限控制"></a>2. 用户登录权限控制</h5><p>关于权限的控制有很多种方式，但是这需要根据实际的业务需求，但是对于前端而言，权限就无非两种，<br>一种是路由权限，一种是操作权限。 而对于后端而言则是角色权限和特殊操作权限，这里解释一下操作权限。</p><ul><li>操作权限： 是指用户需要满足某些条件，或者完成某些操作之后才能进行下一步操作的权限。</li></ul><p>1) 那么前端的路由权限应该如何去做呢？ 首先路由权限包括了菜单权限，我们知道有的应用的权限是根据角色来划分的，不同角色有这不同菜单权限和一些增删改查页面的路由权限，下面我们介绍几种常用方法。</p><p>第一种 在路由的 meta 信息中添加 权限的信息，怎么添加呢 这个看实际情况。</p><p>比如以角色为导向 , 在路由里面表明什么角色可以访问，然后在监听路由进行权限判断<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: &apos;&apos;, name: &apos;home&apos;, component: () =&gt; import(&apos;../views/index/home.vue&apos;), meta: &#123;author:[&apos;admin&apos;, &apos;staff&apos;]&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>也可以使用权限列表，用户登录之后会返回当前用户的权限列表。进行路由监听，判断该路由权限是否在用户权限列表当中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; path: &apos;&apos;, name: &apos;员工管理&apos;, component: () =&gt; import(&apos;../views/index/home.vue&apos;), meta: &#123;authority:&apos;staffManage&apos;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p><p>在vue 2.0之后还可以使用动态路由来控制权限，就是更加用户的权限列表去生成路由，而不是预先生成路由，使用addRoutes时需要在vue的实例中使用，很多网上直接在路由监听处进行动态生成，然并软。。。。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &apos;app&apos;,</span><br><span class="line">  created () &#123;</span><br><span class="line">    const routes = user.generateDynamicRouter()</span><br><span class="line">    this.$router.addRoutes(routes)</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      showModal: false</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>2) 对于特殊的操作权限我们应该如何应对呢？<br>两种方式：<br>第一种：判断用户是否有该操作权限，如果没有则显示没有操作权限，或者没有操作的按钮之类的。这个是在前端进行判断的。<br>第二种：对api进行权限校验，后端进行校验，如果没有权限则返回相应的code，前端对应相应code作出提示。</p><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><ol><li><p>配置文件<br>config.js: 一些配置文件比如HOST, 图片上传地址等。</p></li><li><p>公共组件<br>conponents： 存放一些公用组件，组件分为业务组件和非业务组件。</p></li><li><p>初始化挂载文件<br>init.js: 初始化挂载一些组件，遍历挂载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const components = &#123; breadCrumb, modal, DatePicker, MenuItem, Menu, Submenu, Icon, MenuGroup, subItemTitle, subTitle, Table, Page, Steps, Step, Modal, RadioGroup, Radio &#125;</span><br><span class="line"></span><br><span class="line">const install = function (Vue) &#123;</span><br><span class="line">    Vue.prototype.$Cookie = Cookie;</span><br><span class="line">    Vue.prototype.$Session = Session;</span><br><span class="line">    Vue.prototype.$Message = Message;</span><br><span class="line">    Vue.prototype.$md5 = md5;</span><br><span class="line">    for ( let key in components) &#123;</span><br><span class="line">        Vue.component(key, components[key])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123; install &#125;</span><br></pre></td></tr></table></figure></li><li><p>axios http请求封装，监听 (new promise)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">import axios from &apos;axios&apos;</span><br><span class="line">import router from &apos;../router&apos;</span><br><span class="line"></span><br><span class="line">axios.defaults.timeout = 5000; </span><br><span class="line"> </span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    if (response.data.code !=null &amp;&amp; response.data.code !=undefined) &#123;</span><br><span class="line">      if(response.data.code == 401) &#123;</span><br><span class="line">        vm.$Message.warning(&apos;请重新登录&apos;);</span><br><span class="line">        router.push(&#123;</span><br><span class="line">          path: &apos;/login&apos;,</span><br><span class="line">          query: &#123;redirect: router.currentRoute.fullPath&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return Promise.resolve(response);</span><br><span class="line">    &#125;</span><br><span class="line">    return Promise.resolve(response);</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    return Promise.reject(error.response);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">export &#123; axios &#125;</span><br><span class="line"></span><br><span class="line">export function get(url, params = &#123;&#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    axios.get(url, &#123;</span><br><span class="line">      params: params</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">      console.log(&apos;response&apos;,response)</span><br><span class="line">      resolve(response.data.data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function del(url, params = &#123;&#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    axios.delete(url, &#123;</span><br><span class="line">      params: params</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(response =&gt; &#123;</span><br><span class="line">      console.log(&apos;response&apos;,response)</span><br><span class="line">      resolve(response.data.data);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function post(url, data = &#123;&#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    let config = &#123;</span><br><span class="line">      headers:&#123;&apos;Content-Type&apos;:&apos;application/json;charset=UTF-8&apos;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    axios.post(url, data, config)</span><br><span class="line">      .then(response =&gt; &#123;</span><br><span class="line">        console.log(&apos;response&apos;,response)</span><br><span class="line">        resolve(response.data.data);</span><br><span class="line">      &#125;, err =&gt; &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">export function put(url, data = &#123;&#125;) &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    axios.put(url, data)</span><br><span class="line">      .then(response =&gt; &#123;</span><br><span class="line">        resolve(response.data.data);</span><br><span class="line">      &#125;, err =&gt; &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123; get, post, del, put &#125;</span><br></pre></td></tr></table></figure></li><li><p>跨组件通信 bus<br>bus.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">const bus = new Vue();</span><br><span class="line"></span><br><span class="line">export default bus;</span><br></pre></td></tr></table></figure></li></ol><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import Bus from &apos;./bus&apos;</span><br><span class="line">Bus.$emit(&apos;message&apos;, &#123;newMsgCount: data&#125;)</span><br><span class="line"></span><br><span class="line">Bus.$on(&apos;message&apos;, (data)=&gt;&#123;</span><br><span class="line">                </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol start="5"><li>cookie sessionStorage封装</li></ol><p>Cookie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">export default class Cookie &#123;</span><br><span class="line">    static EXPIRED_DAYS = 30;</span><br><span class="line">    static getCookie(name) &#123;</span><br><span class="line">        var arr, reg = new RegExp(&quot;(^| )&quot; + name + &quot;=([^;]*)(;|$)&quot;);</span><br><span class="line">        if (arr = document.cookie.match(reg))</span><br><span class="line">          return (unescape(arr[2]));</span><br><span class="line">        else</span><br><span class="line">          return null;</span><br><span class="line">    &#125;</span><br><span class="line">       </span><br><span class="line">    static setCookie (name, value, expiredays = null) &#123;</span><br><span class="line">        var exdate = new Date();</span><br><span class="line">        expiredays = expiredays || Cookie.EXPIRED_DAYS </span><br><span class="line">        exdate.setDate(exdate.getDate() + expiredays)</span><br><span class="line">        document.cookie = name + &quot;=&quot; + escape(value) + &quot;;expires=&quot; + exdate.toGMTString()</span><br><span class="line">    &#125;;</span><br><span class="line">       </span><br><span class="line">    static delCookie (name) &#123;</span><br><span class="line">        var exp = new Date();</span><br><span class="line">        exp.setTime(exp.getTime() - 1);</span><br><span class="line">        var value = Cookie.getCookie(name);</span><br><span class="line">        if (value != null) </span><br><span class="line">            document.cookie = name + &quot;=&quot; + value + &quot;;expires=&quot; + exp.toGMTString()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Session<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">export function setSessionStorage (key, value) &#123;</span><br><span class="line">  if (typeof value == &apos;object&apos;)</span><br><span class="line">    value =  JSON.stringify(value)</span><br><span class="line">  sessionStorage.setItem(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function getSessionStorage (key) &#123;</span><br><span class="line">  return JSON.parse(sessionStorage.getItem(key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function clearSessionStorage () &#123;</span><br><span class="line">  sessionStorage.clear()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function setLocalStorage (key, value) &#123;</span><br><span class="line">  if (typeof value == &apos;object&apos;)</span><br><span class="line">    value =  JSON.stringify(value)</span><br><span class="line">  localStorage.setItem(key, value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function getLocalStorage (key) &#123;</span><br><span class="line">  return JSON.parse(localStorage.getItem(key))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export function clearLocalStorage () &#123;</span><br><span class="line">  localStorage.clear()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  setSessionStorage,</span><br><span class="line">  getSessionStorage,</span><br><span class="line">  clearSessionStorage,</span><br><span class="line">  setLocalStorage,</span><br><span class="line">  getLocalStorage,</span><br><span class="line">  clearLocalStorage</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="IE-兼容"><a href="#IE-兼容" class="headerlink" title="IE 兼容"></a>IE 兼容</h3><p>由于IE低版本 不支持一些ES6语法（Promise let 等）或其他第三方库（axios）</p><p>解决方案</p><p>index.html<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 告诉浏览器 IE 使用最高版本</span><br><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>npm install -i -D babel-polyfill</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 在main.js 顶部引入</span><br><span class="line"></span><br><span class="line">import &apos;babel-polyfill&apos;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">// 在 webpack.base.conf.js</span><br><span class="line"></span><br><span class="line">  entry: &#123;</span><br><span class="line">    app:[&apos;babel-polyfill&apos;,&apos;./src/main.js&apos;]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>对于一些 其他UI库 可能需要其他处理 例如 iview</p><p>  {<br>      test: /node_module/iview/src/.vue?/,<br>      loader: ‘babel-loader’,<br>  }</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue 登录权限，项目架构，代码规范，网络安全&lt;br&gt;
    
    </summary>
    
      <category term="os" scheme="http://fuersite.coding.me/all-categories/os/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="vue" scheme="http://fuersite.coding.me/all-tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>canvas面向对象编程</title>
    <link href="http://fuersite.coding.me/2018/05/21/canvas/"/>
    <id>http://fuersite.coding.me/2018/05/21/canvas/</id>
    <published>2018-05-21T00:33:10.000Z</published>
    <updated>2019-08-28T01:21:26.072Z</updated>
    
    <content type="html"><![CDATA[<p>经典canvas绘制小彩球</p><a id="more"></a><pre><!DOCTYPE html><html lang="en"><head><meta name="generator" content="Hexo 3.9.0">  <meta charset="UTF-8">  <title>canvas colorful ball</title>  <style>    #canvas {      margin: 0 auto;      display: block;    }  </style></head><body><canvas id="canvas">current browser is not support</canvas><script>  /*get canvas*/  const canvas = document.getElementById('canvas');  const ctx = canvas.getContext('2d');  canvas.width = 1000;  canvas.height = 600;  canvas.style.backgroundColor = '#000';  /*Ball class*/  class Ball {    constructor(x, y, color) {      this.x = x;      this.y = y;      this.color = color;      this.r = 30;    }    /*render ball*/    render() {      ctx.save();      ctx.beginPath();      ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2);      ctx.fillStyle = this.color;      ctx.fill();      ctx.restore();    }  }  /*move mouse action*/  class MoveBall extends Ball {    constructor(x, y, color) {      super(x, y, color);      this.dX = parseInt(Math.random() * 10 - 5);      this.dY = parseInt(Math.random() * 10 - 5);      this.dR = parseInt(Math.random() * 2 + 1);    }    update() {      this.x += this.dX;      this.y += this.dY;      this.r -= this.dR;      if (this.r < 0) this.r = 0;    }  }  let ballArray = [];  let colorArray = ['red', 'yellow', 'blue', 'purple', 'pink', 'orange'];  canvas.addEventListener('mousemove', function(e) {    var e = e || event;    var colorIndex = parseInt(Math.random() * 5);    ballArray.push(new MoveBall(e.offsetX, e.offsetY, colorArray[colorIndex]));  });  setInterval(function() {    ctx.clearRect(0, 0, canvas.width, canvas.height);    for(item of ballArray) {      item.render();      item.update();    }  }, 50);</script></body></html></pre><p>完整代码(非原创)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>canvas colorful ball<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    #canvas &#123;</span><br><span class="line">      margin: 0 auto;</span><br><span class="line">      display: block;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span>&gt;</span>current browser is not support<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  /*get canvas*/</span><br><span class="line">  const canvas = document.getElementById('canvas');</span><br><span class="line">  const ctx = canvas.getContext('2d');</span><br><span class="line">  canvas.width = 1000;</span><br><span class="line">  canvas.height = 600;</span><br><span class="line">  canvas.style.backgroundColor = '#000';</span><br><span class="line"></span><br><span class="line">  /*Ball class*/</span><br><span class="line">  class Ball &#123;</span><br><span class="line">    constructor(x, y, color) &#123;</span><br><span class="line">      this.x = x;</span><br><span class="line">      this.y = y;</span><br><span class="line">      this.color = color;</span><br><span class="line">      this.r = 30;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*render ball*/</span><br><span class="line">    render() &#123;</span><br><span class="line">      ctx.save();</span><br><span class="line">      ctx.beginPath();</span><br><span class="line">      ctx.arc(this.x, this.y, this.r, 0, Math.PI * 2);</span><br><span class="line">      ctx.fillStyle = this.color;</span><br><span class="line">      ctx.fill();</span><br><span class="line">      ctx.restore();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /*move mouse action*/</span><br><span class="line">  class MoveBall extends Ball &#123;</span><br><span class="line">    constructor(x, y, color) &#123;</span><br><span class="line">      super(x, y, color);</span><br><span class="line"></span><br><span class="line">      this.dX = parseInt(Math.random() * 10 - 5);</span><br><span class="line">      this.dY = parseInt(Math.random() * 10 - 5);</span><br><span class="line">      this.dR = parseInt(Math.random() * 2 + 1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    update() &#123;</span><br><span class="line">      this.x += this.dX;</span><br><span class="line">      this.y += this.dY;</span><br><span class="line">      this.r -= this.dR;</span><br><span class="line"><span class="xml">      if (this.r <span class="tag">&lt; <span class="attr">0</span>) <span class="attr">this.r</span> = <span class="string">0;</span></span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  let ballArray = [];</span><br><span class="line">  let colorArray = ['red', 'yellow', 'blue', 'purple', 'pink', 'orange'];</span><br><span class="line"></span><br><span class="line">  canvas.addEventListener('mousemove', function(e) &#123;</span><br><span class="line">    var e = e || event;</span><br><span class="line">    var colorIndex = parseInt(Math.random() * 5);</span><br><span class="line">    ballArray.push(new MoveBall(e.offsetX, e.offsetY, colorArray[colorIndex]));</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  setInterval(function() &#123;</span><br><span class="line">    ctx.clearRect(0, 0, canvas.width, canvas.height);</span><br><span class="line">    for(item of ballArray) &#123;</span><br><span class="line">      item.render();</span><br><span class="line">      item.update();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, 50);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;经典canvas绘制小彩球&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="canvas" scheme="http://fuersite.coding.me/all-tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>观察者模式与发布/订阅模式区别</title>
    <link href="http://fuersite.coding.me/2018/05/16/observer/"/>
    <id>http://fuersite.coding.me/2018/05/16/observer/</id>
    <published>2018-05-16T03:09:23.000Z</published>
    <updated>2019-08-28T01:21:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>javascript 观察者模式</p><a id="more"></a><p>它们确实存在差异性，但原理是一样的，都是订阅者与发布者之间的数据交互。<br>差别在与于事件调度方式上不一样。</p><h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>比较概念的解释是，目标和观察者是基类，目标提供维护观察者的一系列方法，观察者提供更新接口。具体观察者和具体目标继承各自的基类，然后具体观察者把自己注册到具体目标里，在具体目标发生变化时候，调度观察者的更新方法。</p><p>比如有个“天气中心”的具体目标A，专门监听天气变化，而有个显示天气的界面的观察者B，B就把自己注册到A里，当A触发天气变化，就调度B的更新方法，并带上自己的上下文。</p><p><img src="http://fuersite.coding.me/images/observer.png" alt="observer"></p><h4 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布/订阅模式"></a>发布/订阅模式</h4><p>比较概念的解释是，订阅者把自己想订阅的事件注册到调度中心，当该事件触发时候，发布者发布该事件到调度中心（顺带上下文），由调度中心统一调度订阅者注册到调度中心的处理代码。</p><p>比如有个界面是实时显示天气，它就订阅天气事件（注册到调度中心，包括处理程序），当天气变化时（定时获取数据），就作为发布者发布天气信息到调度中心，调度中心就调度订阅者的天气处理程序。</p><p><img src="http://fuersite.coding.me/images/sub-pub.png" alt="sub-pub"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>1.从两张图片可以看到，最大的区别是调度的地方。</p><p>虽然两种模式都存在订阅者和发布者（具体观察者可认为是订阅者、具体目标可认为是发布者），但是观察者模式是由具体目标调度的，而发布/订阅模式是统一由调度中心调的，所以观察者模式的订阅者与发布者之间是存在依赖的，而发布/订阅模式则不会。</p><p>2.两种模式都可以用于松散耦合，改进代码管理和潜在的复用。</p><p>原文 <a href="https://yq.aliyun.com/articles/49972" target="_blank" rel="noopener">https://yq.aliyun.com/articles/49972</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;javascript 观察者模式&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="观察者" scheme="http://fuersite.coding.me/all-tags/%E8%A7%82%E5%AF%9F%E8%80%85/"/>
    
  </entry>
  
  <entry>
    <title>原生javascript 实现数据双向绑定</title>
    <link href="http://fuersite.coding.me/2018/05/15/sub-pub/"/>
    <id>http://fuersite.coding.me/2018/05/15/sub-pub/</id>
    <published>2018-05-15T08:54:35.000Z</published>
    <updated>2019-08-28T01:21:26.075Z</updated>
    
    <content type="html"><![CDATA[<p>发布-订阅者模式<br><a id="more"></a></p><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><p>自从Angularjs 问世以来，给前端的开发带来了一场巨大的变革， 它最大的特点就是实现了数据的双向绑定，减少了对DOM的操作。<br>以前你可能需要写很多getElementBy…（）之类的操作，但是现在如果使用一些实现数据绑定的框架angularjs,vue,react 等。你只需把你的变量绑定到DOM上，只需要改变变量就可以改变DOM上显示值，是不是很方便呀，如果没有接触过的赶紧去体验一下吧。</p><h3 id="原生javascript-实现数据双向绑定"><a href="#原生javascript-实现数据双向绑定" class="headerlink" title="原生javascript 实现数据双向绑定"></a>原生javascript 实现数据双向绑定</h3><p>有些人就是手痒，明明已经有人实现了这种操作全世界都再用，偏要自己手动去实现一下，而我们就是这种人。<br>虽然我也在网上看到过一些同学实现，但是实现都不够完美，不符合我的心意，那就在来一遍吧。<br>首先我们想象一下数据双向绑定的效果：</p><ul><li>假设把一个变量a绑定到一个dom或者多个dom上</li><li>其中一个dom上的值改变，其他绑定了a的dom上的值也会改变，a的值也会改变</li><li>如果在js中改变a的值，那么所有绑定了a的dom上的值也会相应改变</li></ul><hr><p>哈哈 接下来我们就要准备好我们所需要的材料了。。。。。。</p><h4 id="step1-我们准备几个演示的DOM"><a href="#step1-我们准备几个演示的DOM" class="headerlink" title="step1: 我们准备几个演示的DOM"></a>step1: 我们准备几个演示的DOM</h4><p>两个input， 一个div. 这样设计目的，可以实现我们之前想象的效果，慧眼如炬的你已经发现了他们有点不同是么？<br>里面有一个model的属性，而原生html是没有这个属性的. 没错, 这个model就是我们用来绑定变量的attriName, watch就是我们绑定的变量。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">model</span>=<span class="string">"watch"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">model</span>=<span class="string">"watch"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">model</span>=<span class="string">"watch"</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 30px;top: 100px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h4 id="step2-事件订阅"><a href="#step2-事件订阅" class="headerlink" title="step2: 事件订阅"></a>step2: 事件订阅</h4><p>在上一步中我们已经暴露出了model, watch，那么这一个我们就要实现他们的真正绑定。<br>首先我们定义了在html中绑定的属性名称attriName</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bind_prefix = <span class="string">'model'</span>;</span><br></pre></td></tr></table></figure><p>然后我们要建立一个订阅-发布的事件模型，handles用来存放事件， on用来订阅添加事件，emit用来发布执行事件。bindName其实就是我们上一步input中的model的属性值watch，也就是说这两个input订阅了<br>一个watch的事件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindEvent = &#123;</span><br><span class="line">  handles: &#123;&#125;,</span><br><span class="line">  on: <span class="function"><span class="keyword">function</span> (<span class="params">bindName, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.handles[bindName] = <span class="keyword">this</span>.handles[bindName] || [];</span><br><span class="line">    <span class="keyword">this</span>.handles[bindName].push(callback);</span><br><span class="line">  &#125;,</span><br><span class="line">  emit: <span class="function"><span class="keyword">function</span> (<span class="params">bindName, value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> callback <span class="keyword">of</span> <span class="keyword">this</span>.handles[bindName] ) &#123;</span><br><span class="line">      callback(bindName, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们需要在初始化的时候就把这些事件添加进handles里面，这样才能在操作时候触发。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> propNames = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + bind_prefix + <span class="string">"]"</span>);<span class="comment">//获取所以有model属性元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len =elements.length; i &lt; len; i++) &#123;</span><br><span class="line">  propNames.add(elements[i].getAttribute(bind_prefix)); <span class="comment">//因为model绑定的值（变量）不一样，而我们把这个值作为事件名，这时候需要去重</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">of</span> propNames) &#123;</span><br><span class="line">  bindEvent.on(propName, callback); <span class="comment">//进行事件订阅，callback是触发事件后的回调函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="step3-事件发布"><a href="#step3-事件发布" class="headerlink" title="step3: 事件发布"></a>step3: 事件发布</h4><p>我们想象一下，当我们改变input内容的时候要触发事件，那么我们是不是需要一个监听事件，这个是必然的,监听全局，然后过滤出有model属性的dom,<br>进行事件的发布。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> changeHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> target = event.target || event.srcElemnt,</span><br><span class="line">  propName = target.getAttribute(bind_prefix);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(propName &amp;&amp; propName !== <span class="string">""</span>)&#123;</span><br><span class="line">    bindEvent.emit(propName, target.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener)&#123;</span><br><span class="line">  <span class="built_in">document</span>.addEventListener(<span class="string">"keyup"</span>,changeHandler, <span class="literal">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">  <span class="built_in">document</span>.attachEvent(<span class="string">"onkeyup"</span>,changeHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在添加了全局监听之后，如果改变input就会触发事件并且获取到最新值target.value，进一步执行bindEvent.emit(), 在里面会执行一个callback，这个callback才是我们完成数据改变的关键步骤。<br>下面这个代码就应该容易懂了，对于form的元素会有value值，div,span等的话需要使用innerHTML或者innerText</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">propName, newValue</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + bind_prefix + <span class="string">"="</span> + propName + <span class="string">"]"</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len =elems.length; i &lt; len; i++) &#123;</span><br><span class="line">    tagName = elems[i].tagName.toLowerCase();</span><br><span class="line">    <span class="keyword">if</span>(tagName === <span class="string">"input"</span> || tagName === <span class="string">"textarea"</span> || tagName === <span class="string">"select"</span>)&#123;</span><br><span class="line">      elems[i].value = newValue;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      elems[i].innerHTML = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们把上面的代码组合起来时，就可以实现dom直接的相互作用，相互改变。一个input值改变，其他相同绑定的dom也会发生改变。</p><p>但是 。。。。。。。。。<br>这还不够<br>现在只是dom之间相互改变，还没有涉及到变量的改变，数据的双向绑定是改变变量，那么绑定了该变量的dom也会改变，改变dom值时，相应的变量也会改变。</p><h4 id="step4-实现变量与dom之间的相互改变"><a href="#step4-实现变量与dom之间的相互改变" class="headerlink" title="step4: 实现变量与dom之间的相互改变"></a>step4: 实现变量与dom之间的相互改变</h4><p>怎么做？ 这个就需要用到一个Object.defineProperty(), 使用里面的set, get方法。<br>不熟悉这个方法的同学可以去了解一下，当 this.watch= ‘hello’，时会执行set方法，当调用this.watch时会执行get方法。<br>然后我们需要在初始化时候给每一个绑定的变量执行这个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bindModel = <span class="function"><span class="keyword">function</span> (<span class="params">scope, property</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + bind_prefix + <span class="string">"="</span> + property + <span class="string">"]"</span>) || [];</span><br><span class="line">  <span class="keyword">if</span>(!scope.hasOwnProperty(property)) &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(scope, property, &#123;</span><br><span class="line">      <span class="keyword">get</span>: function() &#123;</span><br><span class="line">        tagName = elems[<span class="number">0</span>].tagName.toLowerCase();</span><br><span class="line">        <span class="keyword">if</span>(tagName === <span class="string">"input"</span> || tagName === <span class="string">"textarea"</span> || tagName === <span class="string">"select"</span>)&#123;</span><br><span class="line">          <span class="keyword">return</span> elems[<span class="number">0</span>].value;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> elems[<span class="number">0</span>].innerHTML;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elem.value;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">set</span>: function(newValue) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = elems.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          tagName = elems[i].tagName.toLowerCase();</span><br><span class="line">          <span class="keyword">if</span>(tagName === <span class="string">"input"</span> || tagName === <span class="string">"textarea"</span> || tagName === <span class="string">"select"</span>)&#123;</span><br><span class="line">            elems[i].value = newValue;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            elems[i].innerHTML = newValue;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      writeable: <span class="literal">true</span>,</span><br><span class="line">      configurable: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="完全代码：-复制可用-欢迎copy"><a href="#完全代码：-复制可用-欢迎copy" class="headerlink" title="完全代码： 复制可用, 欢迎copy"></a>完全代码： 复制可用, 欢迎copy</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>sub-pub<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">model</span>=<span class="string">"watch"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">model</span>=<span class="string">"watch"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">model</span>=<span class="string">"watch"</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 30px;top: 100px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> bind_prefix = <span class="string">'model'</span>;</span></span><br><span class="line"><span class="javascript">vm = <span class="keyword">this</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> bindEvent = &#123;</span></span><br><span class="line">  handles: &#123;&#125;,</span><br><span class="line"><span class="javascript">  on: <span class="function"><span class="keyword">function</span> (<span class="params">bindName, callback</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.handles[bindName] = <span class="keyword">this</span>.handles[bindName] || [];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.handles[bindName].push(callback);</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="javascript">  emit: <span class="function"><span class="keyword">function</span> (<span class="params">bindName, value</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> callback <span class="keyword">of</span> <span class="keyword">this</span>.handles[bindName] ) &#123;</span></span><br><span class="line">      callback(bindName, value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> changeHandler = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> target = event.target || event.srcElemnt,</span></span><br><span class="line">  propName = target.getAttribute(bind_prefix);</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(propName &amp;&amp; propName !== <span class="string">""</span>)&#123;</span></span><br><span class="line">    bindEvent.emit(propName, target.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span>(<span class="params">propName, newValue</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + bind_prefix + <span class="string">"="</span> + propName + <span class="string">"]"</span>);</span></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>,len =elems.length; i &lt; len; i++) &#123;</span></span><br><span class="line">    tagName = elems[i].tagName.toLowerCase();</span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(tagName === <span class="string">"input"</span> || tagName === <span class="string">"textarea"</span> || tagName === <span class="string">"select"</span>)&#123;</span></span><br><span class="line">      elems[i].value = newValue;</span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">      elems[i].innerHTML = newValue;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> bindModel = <span class="function"><span class="keyword">function</span> (<span class="params">scope, property</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> elems = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + bind_prefix + <span class="string">"="</span> + property + <span class="string">"]"</span>) || [];</span></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(!scope.hasOwnProperty(property)) &#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(scope, property, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">get</span>: function() &#123;</span></span><br><span class="line">        tagName = elems[0].tagName.toLowerCase();</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(tagName === <span class="string">"input"</span> || tagName === <span class="string">"textarea"</span> || tagName === <span class="string">"select"</span>)&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> elems[<span class="number">0</span>].value;</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> elems[<span class="number">0</span>].innerHTML;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> elem.value;</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="keyword">set</span>: function(newValue) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = elems.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span></span><br><span class="line">          tagName = elems[i].tagName.toLowerCase();</span><br><span class="line"><span class="javascript">          <span class="keyword">if</span>(tagName === <span class="string">"input"</span> || tagName === <span class="string">"textarea"</span> || tagName === <span class="string">"select"</span>)&#123;</span></span><br><span class="line">            elems[i].value = newValue;</span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">            elems[i].innerHTML = newValue;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      writeable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">      configurable: <span class="literal">true</span></span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> init = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> propNames = <span class="keyword">new</span> <span class="built_in">Set</span>();</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> elements = <span class="built_in">document</span>.querySelectorAll(<span class="string">"["</span> + bind_prefix + <span class="string">"]"</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len =elements.length; i &lt; len; i++) &#123;</span></span><br><span class="line">    propNames.add(elements[i].getAttribute(bind_prefix));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">for</span> (<span class="keyword">var</span> propName <span class="keyword">of</span> propNames) &#123;</span></span><br><span class="line">    bindEvent.on(propName, callback);</span><br><span class="line"><span class="javascript">    bindModel(<span class="keyword">this</span>, propName);</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">if</span>(<span class="built_in">document</span>.addEventListener)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">"keyup"</span>,changeHandler, <span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">  &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.attachEvent(<span class="string">"onkeyup"</span>,changeHandler);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">init();</span><br><span class="line"><span class="javascript">vm.watch = <span class="string">"hello"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="效果演示："><a href="#效果演示：" class="headerlink" title="效果演示："></a>效果演示：</h3><p>watch 初始值 hello</p><pre>    <!DOCTYPE html>    <html lang="en">    <head><meta name="generator" content="Hexo 3.9.0">      <meta charset="UTF-8">      <title>sub-pub</title>    </head>    <body>    <form>      <input type="text" model="watch">      <input type="text" model="watch">    </form>    <div model="watch" style="width: 100px; height: 30px;top: 100px;"></div>    <script>    var bind_prefix = 'model';    vm = this    var bindEvent = {      handles: {},      on: function (bindName, callback) {        this.handles[bindName] = this.handles[bindName] || [];        this.handles[bindName].push(callback);      },      emit: function (bindName, value) {        for (var callback of this.handles[bindName] ) {          callback(bindName, value);        }      }    };    var changeHandler = function(event){      var target = event.target || event.srcElemnt,      propName = target.getAttribute(bind_prefix);      if(propName && propName !== ""){        bindEvent.emit(propName, target.value);      }    };    var callback = function(propName, newValue){      var elems = document.querySelectorAll("[" + bind_prefix + "=" + propName + "]");      for(var i = 0,len =elems.length; i < len; i++) {        tagName = elems[i].tagName.toLowerCase();        if(tagName === "input" || tagName === "textarea" || tagName === "select"){          elems[i].value = newValue;        } else {          elems[i].innerHTML = newValue;        }      }    };    var bindModel = function (scope, property) {      var elems = document.querySelectorAll("[" + bind_prefix + "=" + property + "]") || [];      if(!scope.hasOwnProperty(property)) {        Object.defineProperty(scope, property, {          get: function() {            tagName = elems[0].tagName.toLowerCase();            if(tagName === "input" || tagName === "textarea" || tagName === "select"){              return elems[0].value;            } else {              return elems[0].innerHTML;            }            return elem.value;          },          set: function(newValue) {            for (var i = elems.length - 1; i >= 0; i--) {              tagName = elems[i].tagName.toLowerCase();              if(tagName === "input" || tagName === "textarea" || tagName === "select"){                elems[i].value = newValue;              } else {                elems[i].innerHTML = newValue;              }            }          },          writeable: true,          configurable: true        });      }    };    var init = function () {      var propNames = new Set();      var elements = document.querySelectorAll("[" + bind_prefix + "]");      for(var i = 0, len =elements.length; i < len; i++) {        propNames.add(elements[i].getAttribute(bind_prefix));      }      for (var propName of propNames) {        bindEvent.on(propName, callback);        bindModel(this, propName);      }      if(document.addEventListener){        document.addEventListener("keyup",changeHandler, false);      }else{        document.attachEvent("onkeyup",changeHandler);      }    };    init();    vm.watch = "hello";    </script>    </body>    </html></pre><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ol><li>代码不够健壮，随手而为。</li><li>目前只做了string类型数据双向绑定， 不支持对象，数组等复杂数据结构。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;发布-订阅者模式&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="发布者-订阅者事件" scheme="http://fuersite.coding.me/all-tags/%E5%8F%91%E5%B8%83%E8%80%85-%E8%AE%A2%E9%98%85%E8%80%85%E4%BA%8B%E4%BB%B6/"/>
    
      <category term="原生javascript 数据的双向绑定" scheme="http://fuersite.coding.me/all-tags/%E5%8E%9F%E7%94%9Fjavascript-%E6%95%B0%E6%8D%AE%E7%9A%84%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
    
  </entry>
  
  <entry>
    <title>js 自定义事件</title>
    <link href="http://fuersite.coding.me/2018/05/11/javascriptEvent/"/>
    <id>http://fuersite.coding.me/2018/05/11/javascriptEvent/</id>
    <published>2018-05-11T06:02:41.000Z</published>
    <updated>2019-08-28T01:21:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>create own event and add watch<br><a id="more"></a><br>javascript中常使用的事件类型主要是HTML事，DOM事件，设备事件等等．但是有时候对于一些复杂的交互涉及到页面之间数据传输等，光只用DOM的事件是远远不够的，而且事件监听混乱．这时候就需要我们自定义事件，灵活，可拓展性使用</p><h3 id="DOM操作事件"><a href="#DOM操作事件" class="headerlink" title="DOM操作事件"></a>DOM操作事件</h3><p>1.模式</p><pre><code class="javascript">element.addEventListener(type, handler, false)//false表示在冒泡阶段处理事件，默认false</code></pre><p>2.兼容事件处理Util</p><pre><code class="javascript">  // 跨浏览器兼容事件  var EventUtil = {    addHandler: function(element, type, handler){        if (element.addEventListener){            element.addEventListener(type, handler, false);        } else if (element.attachEvent){            element.attachEvent("on" + type, handler);        } else {            element["on" + type] = handler;        }    },    removeHandler: function(element, type, handler){        if (element.removeEventListener){            element.removeEventListener(type, handler, false);        } else if (element.detachEvent){            element.detachEvent("on" + type, handler);        } else {            element["on" + type] = null;        }    },    getEvent: function(event){        return event ? event : window.event;    },    getTarget: function(event){        return event.target || event.srcElement;    },    preventDefault: function(event){        if (event.preventDefault){            event.preventDefault();        } else {            event.returnValue = false;        }    },    stopPropagation: function(event){        if (event.stopPropagation){            event.stopPropagation();        } else {            event.cancelBubble = true;        }    }  };</code></pre><h3 id="广义观察者"><a href="#广义观察者" class="headerlink" title="广义观察者"></a>广义观察者</h3><p>1.发布-订阅者模式</p><pre><code class="javascript">  $on('eventName', callback)  $emit('eventName'，data)</code></pre><p>2.自定义Event</p><p><pre><code class="javascript"><br>  var customeEvent = {<br>    on: function (eventName, callback) {<br>      if (!this.handles) {<br>        Object.defineProperty(this, handles, {<br>          configurable: false, //true , can modify by defineProperty<br>          writable: true, //true , can modity this value<br>          enumerable: false, //false, can not get this property by for in  or Object.keys()<br>          value: {}<br>        })<br>        this.handles = {};<br>      }<br>      if (!this.handles[eventName]) {<br>        this.handles[eventName] = [];<br>      }<br>      this.handles[eventName].push(callback);<br>    },<br>    emit: function(eventName, data) {<br>      var message = arguments[1];<br>      if (this.handles &amp;&amp; this.handles[eventName]) {<br>        this.handles[eventName].map(function(callback) {<br>          callback(message);<br>        })<br>      }<br>    },<br>    removeEvent: function(eventName) {<br>      if (this.handles &amp;&amp; this.handles[eventName]) {<br>        delete this.handles[eventName]<br>      }<br>    }<br>  };<br></code></pre></p><h3 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>custome event<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./lib/Event.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> // import customeEvent EventUtil</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    customeEvent.on('event', function(data)&#123;</span><br><span class="line">      console.log('I am first', data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    customeEvent.on('event', function(data)&#123;</span><br><span class="line">      console.log('I am second', data);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    customeEvent.on('test', function(data)&#123;</span><br><span class="line">      console.log('I am listening', data);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"mybtn"</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 30px; background-color: red;"</span>&gt;</span>EventUtil<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  ;(function() &#123;</span><br><span class="line">    var mybtn = document.getElementById('mybtn');</span><br><span class="line">    EventUtil.addHandler(mybtn, 'click', function(event)&#123;</span><br><span class="line">      alert('DOM Event');</span><br><span class="line">    &#125;);</span><br><span class="line">    customeEvent.emit('event', 'listening custom event');</span><br><span class="line">    customeEvent.emit('test', 'test custom event');</span><br><span class="line">  &#125;)()</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">I am first listening custom event</span><br><span class="line">I am second listening custom event</span><br><span class="line">I am listening test custom event</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;create own event and add watch&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="自定义事件" scheme="http://fuersite.coding.me/all-tags/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>http-请求状态码</title>
    <link href="http://fuersite.coding.me/2018/04/28/reponseCode/"/>
    <id>http://fuersite.coding.me/2018/04/28/reponseCode/</id>
    <published>2018-04-28T08:30:37.000Z</published>
    <updated>2019-08-28T01:21:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>响应状态码<br><a id="more"></a></p><p>通过数字代码设置响应状态：</p><ul><li>100 “continue”</li><li>101 “switching protocols”</li><li>102 “processing”</li><li>200 “ok”</li><li>201 “created”</li><li>202 “accepted”</li><li>203 “non-authoritative information”</li><li>204 “no content”</li><li>204 “reset content”</li><li>206 “partial content”</li><li>207 “multi-status”</li><li>208 “already reported”</li><li>226 “im used”</li><li>300 “multiple choices”</li><li>301 “moved permanently”</li><li>302 “found”</li><li>303 “see other”</li><li>304 “not modified”</li><li>305 “use proxy”</li><li>307 “temporary redirect”</li><li>308 “permanent redirect”</li><li>400 “bad request”</li><li>401 “unauthorized”</li><li>402 “payment required”</li><li>403 “forbidden”</li><li>404 “not found”</li><li>405 “method not allowed”</li><li>406 “not acceptable”</li><li>407 “proxy authentication required”</li><li>408 “request timeout”</li><li>409 “conflict”</li><li>410 “gone”</li><li>411 “length required”</li><li>412 “precondition failed”</li><li>413 “payload too large”</li><li>414 “uri too long”</li><li>415 “unsupported media type”</li><li>416 “range not satisfiable”</li><li>417 “expectation failed”</li><li>418 “I’m a teapot”</li><li>422 “unprocessable entity”</li><li>423 “locked”</li><li>424 “failed dependency”</li><li>426 “upgrade required”</li><li>428 “precondition required”</li><li>429 “too many requests”</li><li>431 “request header fields too large”</li><li>500 “internal server error”</li><li>501 “not implemented”</li><li>502 “bad gateway”</li><li>503 “service unavailable”</li><li>504 “gateway timeout”</li><li>505 “http version not supported”</li><li>506 “variant also negotiates”</li><li>507 “insufficient storage”</li><li>508 “loop detected”</li><li>510 “not extended”</li><li>511 “network authentication required”</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;响应状态码&lt;br&gt;
    
    </summary>
    
    
      <category term="http" scheme="http://fuersite.coding.me/all-tags/http/"/>
    
      <category term="responseCode" scheme="http://fuersite.coding.me/all-tags/responseCode/"/>
    
  </entry>
  
  <entry>
    <title>DOM 操作知识</title>
    <link href="http://fuersite.coding.me/2018/04/27/DOMOperation/"/>
    <id>http://fuersite.coding.me/2018/04/27/DOMOperation/</id>
    <published>2018-04-27T07:20:06.000Z</published>
    <updated>2019-08-28T01:21:26.071Z</updated>
    
    <content type="html"><![CDATA[<p>DOM 操作小知识</p><a id="more"></a><h3 id="元素遍历（JavaScript高级程序设计提供方法）"><a href="#元素遍历（JavaScript高级程序设计提供方法）" class="headerlink" title="元素遍历（JavaScript高级程序设计提供方法）"></a>元素遍历（JavaScript高级程序设计提供方法）</h3><p>Element Traversal API为DOM元素添加了以下5个属性。</p><ul><li><p>childElementCount：返回子元素（不包括文本节点和注释）的个数。</p></li><li><p>firstElementChild：指向第一个子元素；firstChild的元素版。</p></li><li><p>lastElementChild：指向最后一个子元素；lastChild的元素版。</p></li><li><p>previousElementSibling：指向前一个同辈元素；previousSibling的元素版。</p></li><li><p>nextElementSibling：指向后一个同辈元素；nextSibling的元素版。</p></li></ul><p>1、 过去，要跨浏览器遍历某元素的所有子元素，需要像下面这样写代码。</p><pre><code class="javascript">  var i,      len,      child = element.firstChild;  while(child != element.lastChild){      if (child.nodeType == 1){   //检查是不是元素         processChild(child);      }      child = child.nextSibling;  }</code></pre><font size="4"></font>2、 而使用Element Traversal新增的元素，代码会更简洁。(减少了一个nodeType判断)<pre><code class="javascript">  var i,      len,      child = element.firstElementChild;  while(child != element.lastElementChild){      processChild(child);   //已知其是元素      child = child.nextElementSibling;  }</code></pre><hr><h3 id="检查是DOM否包含某子节点（JavaScript高级程序设计提供方法）"><a href="#检查是DOM否包含某子节点（JavaScript高级程序设计提供方法）" class="headerlink" title="检查是DOM否包含某子节点（JavaScript高级程序设计提供方法）"></a>检查是DOM否包含某子节点（JavaScript高级程序设计提供方法）</h3><ol><li><p><code>contains()</code>方法<br>在实际开发中，经常需要知道某个节点是不是另一个节点的后代。IE为此率先引入了contains()方法，以便不通过在DOM文档树中查找即可获得这个信息。调用contains()方法的应该是祖先节点，也就是搜索开始的节点，这个方法接收一个参数，即要检测的后代节点。如果被检测的节点是后代节点，该方法返回true；否则，返回false。以下是一个例子：</p><pre><code class="javascript"> alert(document.documentElement.contains(document.body));    //true</code></pre></li><li><p><code>compareDocumentPosition()</code> 方法<br>使用DOM Level 3 compareDocumentPosition()也能够确定节点间的关系。支持这个方法的浏览器有IE9+、Firefox、Safari、Opera 9.5+和Chrome。如前所述，这个方法用于确定两个节点间的关系，返回一个表示该关系的位掩码（ bitmask）。下表列出了这个位掩码的值。</p><pre><code class="javascript">var result = document.documentElement.compareDocumentPosition(document.body);alert(!!(result & 16));</code></pre></li></ol><table><thead><tr><th style="text-align:right">掩码</th><th style="text-align:right">节点关系</th></tr></thead><tbody><tr><td style="text-align:right">1</td><td style="text-align:right">无关（给定的节点不在当前文档中）</td></tr><tr><td style="text-align:right">2</td><td style="text-align:right">居前（给定的节点在DOM树中位于参考节点之前）</td></tr><tr><td style="text-align:right">4</td><td style="text-align:right">居后（给定的节点在DOM树中位于参考节点之后）</td></tr><tr><td style="text-align:right">8</td><td style="text-align:right">包含（给定的节点是参考节点的祖先）</td></tr><tr><td style="text-align:right">16</td><td style="text-align:right">被包含（给定的节点是参考节点的后代）</td></tr></tbody></table><p>结合以上两个方法，封装一个检查方法：</p><pre><code class="javascript">function contains(refNode, otherNode){    if (typeof refNode.contains == "function" &&            (!client.engine.webkit || client.engine.webkit >= 522)){        return refNode.contains(otherNode);    } else if (typeof refNode.compareDocumentPosition == "function"){        return !!(refNode.compareDocumentPosition(otherNode) & 16);    } else {        var node = otherNode.parentNode;        do {            if (node === refNode){                return true;            } else {                node = node.parentNode;            }        } while (node !== null);        return false;    }}</code></pre><hr><h3 id="理解-DOM-clientWidth-clientHeight-offsetLeft-offsetTop-scroll-…"><a href="#理解-DOM-clientWidth-clientHeight-offsetLeft-offsetTop-scroll-…" class="headerlink" title="理解 DOM clientWidth, clientHeight, offsetLeft, offsetTop, scroll …"></a>理解 DOM clientWidth, clientHeight, offsetLeft, offsetTop, scroll …</h3><p>结构图<br><img src="http://fuersite.coding.me/images/dom.png" alt="dom"></p><ul><li>clientWidth, clientHeight 为div 内容宽度和长度</li><li>offsetWidht, offsetHeight 为div 内容+border 的宽度和长度</li><li>scrollWidth, scrollHeight 为div 里面 <code>实际</code> 内容的宽度和长度（overflow）</li><li>scrollTop， 为滚动条向下滚动时向上超出div内容的长度</li><li>scrollWidth, 为滚动条向右滚动时向左超出div内容的长度</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM 操作小知识&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="html" scheme="http://fuersite.coding.me/all-tags/html/"/>
    
      <category term="scrollTop" scheme="http://fuersite.coding.me/all-tags/scrollTop/"/>
    
      <category term="clientHeight" scheme="http://fuersite.coding.me/all-tags/clientHeight/"/>
    
  </entry>
  
  <entry>
    <title>websocket</title>
    <link href="http://fuersite.coding.me/2018/04/24/websocket/"/>
    <id>http://fuersite.coding.me/2018/04/24/websocket/</id>
    <published>2018-04-24T09:26:08.000Z</published>
    <updated>2019-08-28T01:21:26.075Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="websocket" scheme="http://fuersite.coding.me/all-tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>php生命周期</title>
    <link href="http://fuersite.coding.me/2018/04/24/phpLive/"/>
    <id>http://fuersite.coding.me/2018/04/24/phpLive/</id>
    <published>2018-04-24T09:24:10.000Z</published>
    <updated>2019-08-28T01:21:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>学习框架先从生命周期开始<br><a id="more"></a></p><h3 id="首先我们看一份生命周期图"><a href="#首先我们看一份生命周期图" class="headerlink" title="首先我们看一份生命周期图"></a>首先我们看一份生命周期图</h3><p><img src="http://fuersite.coding.me/images/phplive.png" alt="live"></p><h3 id="Yii启动请求流程"><a href="#Yii启动请求流程" class="headerlink" title="Yii启动请求流程"></a>Yii启动请求流程</h3><ol><li><p>入口脚本加载主体配置(index.php)<br>— 项目启动执行入口文件, 加载config数组, 实例化Application</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">defined(&apos;YII_DEBUG&apos;) or define(&apos;YII_DEBUG&apos;, true);</span><br><span class="line">defined(&apos;YII_ENV&apos;) or define(&apos;YII_ENV&apos;, &apos;dev&apos;);</span><br><span class="line"></span><br><span class="line">require __DIR__ . &apos;/../vendor/autoload.php&apos;;</span><br><span class="line">require __DIR__ . &apos;/../vendor/yiisoft/yii2/Yii.php&apos;;</span><br><span class="line"></span><br><span class="line">$config = require __DIR__ . &apos;/../config/web.php&apos;;</span><br><span class="line"></span><br><span class="line">(new yii\web\Application($config))-&gt;run();</span><br></pre></td></tr></table></figure></code></pre></li><li><p>入口脚本new Application() 执行构造函数<br>— yii\web\Application 继承yii\base\Application, 执行父类构造函数</p><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public function __construct($config = [])</span><br><span class="line">&#123;</span><br><span class="line">    Yii::$app = $this;</span><br><span class="line">    static::setInstance($this);</span><br><span class="line"></span><br><span class="line">    $this-&gt;state = self::STATE_BEGIN;</span><br><span class="line"></span><br><span class="line">    $this-&gt;preInit($config);</span><br><span class="line"></span><br><span class="line">    $this-&gt;registerErrorHandler($config);</span><br><span class="line"></span><br><span class="line">    Component::__construct($config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ul><li>static::setInstance($this); 加载当前模块app</li><li>$this-&gt;preInit($config); 会设置一下基本配置 例如basePath, vendorPath, runtimePath, 设置container(依赖)设置核心组件coreComponent.</li><li>$this-&gt;registerErrorHandler($config); 注册错误处理组件, 但是核心组件是yii默认开启的,没有在config中配置,也同样起作用</li><li><p>Component::__construct($config); 组件实例化 执行Yii::configure($this, $config)</p><pre><code><figure class="highlight plain"><figcaption><span>component.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public function __construct($config = [])</span><br><span class="line">&#123;</span><br><span class="line">    if (!empty($config)) &#123;</span><br><span class="line">        Yii::configure($this, $config);</span><br><span class="line">    &#125;</span><br><span class="line">    $this-&gt;init();</span><br><span class="line">&#125;</span><br><span class="line">// BaseObject.php</span><br><span class="line">public static function configure($object, $properties)</span><br><span class="line">&#123;</span><br><span class="line">    foreach ($properties as $name =&gt; $value) &#123;</span><br><span class="line">        $object-&gt;$name = $value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return $object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>执行Application::init(), 初始化，该函数会调用 yii\base\Application::bootstrap()</p></li></ul></li><li><p>入口脚本执行run()方法, 运行主体</p><ul><li>触发 [[yii\base\Application::EVENT_BEFORE_REQUEST|EVENT_BEFORE_REQUEST]] 事件。</li><li>处理请求：解析请求 路由 和相关参数；创建路由指定的模块、控制器和动作对应的类，并运行动作。</li><li>触发 [[yii\base\Application::EVENT_AFTER_REQUEST|EVENT_AFTER_REQUEST]] 事件。</li><li>发送响应到终端用户.</li></ul></li><li><p>入口脚本接收应用主体传来的退出状态($response-&gt;exitStatus)并完成请求的处理。</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习框架先从生命周期开始&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="php" scheme="http://fuersite.coding.me/all-tags/php/"/>
    
      <category term="php 生命周期" scheme="http://fuersite.coding.me/all-tags/php-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>jsEventPriority</title>
    <link href="http://fuersite.coding.me/2018/04/24/jsEventPriority/"/>
    <id>http://fuersite.coding.me/2018/04/24/jsEventPriority/</id>
    <published>2018-04-24T09:21:33.000Z</published>
    <updated>2019-08-28T01:21:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>JS Onblur 与Onclick事件冲突的解决办法<br><a id="more"></a></p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><ol><li>存在一个input框，onfoucs 时出现一个下拉框列表，点击选择其中一项时，显示在input框， input框onblur，onblur事件关闭下拉框。</li></ol><h4 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h4><ol><li>如果点击选择的事件使用的是onclick()时，onblur会优先onclick执行，导致下拉框消失，而没有选中。</li></ol><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li>使用onmousedown()代替onclick(), onmousedown优先于onblur()。</li><li>在onblur(){ settimeout(function{ 下拉框消失 }, 50)}，在onblur中添加定时器进行延迟。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JS Onblur 与Onclick事件冲突的解决办法&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="onblur,Onclick 冲突" scheme="http://fuersite.coding.me/all-tags/onblur-Onclick-%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>koa2 使用</title>
    <link href="http://fuersite.coding.me/2018/03/30/koa2/"/>
    <id>http://fuersite.coding.me/2018/03/30/koa2/</id>
    <published>2018-03-30T10:23:40.000Z</published>
    <updated>2019-08-28T01:21:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>ko2 从零到亿<br><a id="more"></a></p><ul><li>当前环境:<br> ubuntu: 14.04<br> Node: v8.9.0<br> npm: 5.8.0</li></ul><hr><p>对于node开发一直很是向往，一直想探索一下这片不一样的神秘蓝天，然而工作的项目很少有接触到的,　但这并不能阻止我们对未知的探索，虽然不知这条路通向何方，也不知道终点是什么，我们期待的是surprise and challenge. If you have a interest, follow me.</p><h3 id="koa2项目搭建"><a href="#koa2项目搭建" class="headerlink" title="koa2项目搭建"></a>koa2项目搭建</h3><hr><p><code>注</code>:　命令基本上在终端执行的</p><p>1.创建node-koa项目目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir node-koa</span><br><span class="line">$ cd node-koa</span><br></pre></td></tr></table></figure></p><p>２.npm初始化项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm init         //创建package.json文件</span><br></pre></td></tr></table></figure></p><p>３.安装koa2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install koa@2 --save</span><br></pre></td></tr></table></figure></p><p>４.安装路由<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install koa-router --save</span><br></pre></td></tr></table></figure></p><p>5.创建入口文件<code>index.js</code>,　内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const Koa = require(&apos;koa&apos;);</span><br><span class="line">const app = new Koa();</span><br><span class="line"></span><br><span class="line">app.use(async ctx =&gt; &#123;</span><br><span class="line">  ctx.body = &apos;Hello World&apos;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000);</span><br></pre></td></tr></table></figure></p><p>6.测试：<br>在终端执行<code>node index.js</code>, 然后在浏览器访问<code>localhost:3000</code><br>会显示：　hello word</p><h3 id="ES6使用package-json初始配置"><a href="#ES6使用package-json初始配置" class="headerlink" title="ES6使用package.json初始配置"></a>ES6使用package.json初始配置</h3><p>1引入babel<br>&emsp;&emsp;使用es6部分语法时，node环境和浏览器环境存在兼容性问题，使用babel进行转换．</p><ul><li>babel-register</li><li>babel-polyfill</li><li>babel-preset-es2015<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm i babel-register babel-polyfill babel-preset-es2015 --save</span><br></pre></td></tr></table></figure></li></ul><p>在<code>index.js</code>引入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const babel = require(&apos;babel-register&apos;)</span><br><span class="line">const babelPoly = require(&apos;babel-polyfill&apos;)</span><br><span class="line">const router = require(&apos;./router&apos;)</span><br><span class="line">const Koa = require(&apos;koa&apos;)</span><br><span class="line">const app = new Koa()</span><br></pre></td></tr></table></figure></p><p>在项目目录下创建.babelrc， 内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;presets&quot;: [&quot;es2015&quot;] // 转码规则，之前安装了babel-preset-es2015</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.package.json初始配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;koa-node&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;dev&quot;: &quot;node index.js&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;ivin&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;koa&quot;: &quot;^2.5.0&quot;,</span><br><span class="line">    &quot;koa-router&quot;: &quot;^7.4.0&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-polyfill&quot;: &quot;^6.26.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;babel-register&quot;: &quot;^6.26.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用script配置一下脚本命令，之前启动项目使用<code>node　index.js</code>，现在我们把命令配置到里面去．只需在终端执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure></p><p>项目启动后,可以在非入口文件中使用es6语法了, <code>注意</code> index.js 中还有要使用原生语法,因为babel时在index才引入的.</p><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><ol><li><p>编写route.js 文件<br>——　这里编写了两个路由，一个同步，一个异步。</p><pre><code class="javascript"> const Router = require('koa-router') const router = new Router() router.get('/user/profile', 'Hi client') router.get('/user', async ctx => {   const sleep = async (ms) => {     return new Promise((resolve, reject) => {       setTimeout(() => {         let data = 'welcome Koa2'         resolve(data)       }, ms)     } )   }   ctx.body = await sleep(4000) }) module.exports = router</code></pre></li><li><p>在index.js 中引入route文件</p><pre><code class="javascript"> const router = require('./router') app   .use(router.routes())   .use(router.allowedMethods())</code></pre></li><li><p>浏览器访问：　<a href="http://localhost:3000/user，" target="_blank" rel="noopener">http://localhost:3000/user，</a> 返回　welcome Koa2</p></li></ol><h3 id="上下文-Context"><a href="#上下文-Context" class="headerlink" title="上下文(Context)"></a>上下文(Context)</h3><p>Koa Context 将 node 的 request 和 response 对象封装到单个对象中，为编写 Web 应用程序和 API 提供了许多有用的方法。 这些操作在 HTTP 服务器开发中频繁使用，它们被添加到此级别而不是更高级别的框架，这将强制中间件重新实现此通用功能。<br>_每个_ 请求都将创建一个 Context，并在中间件中作为接收器引用，或者 ctx 标识符，如以下代码</p><p><pre><code class="javascript"><br>app.use(async (ctx, next) =&gt; {<br>  console.log(‘first11 context’, ‘———————————–’)<br>  await next()<br>  console.log(‘first12 context’, ‘———————————–’)<br>})<br>app.use(ctx =&gt; {<br>  console.log(‘second21 context’, ‘———————————-‘)<br>})<br></code></pre><br>执行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">first11 context -----------------------------------</span><br><span class="line">second21 context ----------------------------------</span><br><span class="line">first12 context -----------------------------------</span><br></pre></td></tr></table></figure><p>其实中间件很像我们所熟悉的拦截器，　执行顺序　Ａ –wait-&gt; B –wait-&gt; C–(done request and response) –callback-&gt; B –callback-&gt; A.<br>经过middleware层层过滤后在处理请求，处理完后，在进行回调。如果前面有中间层进行response了就不会再执行后面的middleware<br>所以你需要吧处理请求(route)的放到最后处理,　路由（route）也是作为一个中间件在应用程序中。看下面代码：</p><p><pre><code class="javascript"><br>  app.use(async (ctx, next) =&gt; {<br>    console.log(‘first11 context’, ‘———————————–’)<br>    await next()<br>    console.log(‘first12 context’, ‘———————————–’)<br>  })<br>  app.use(async (ctx, next) =&gt; {<br>    console.log(‘second21 context’, ‘———————————-‘)<br>    await next()<br>  })<br>  app<br>    .use(router.routes())<br>    .use(router.allowedMethods())<br></code></pre><br>middleware 使用await async 异步进行了级联</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ko2 从零到亿&lt;br&gt;
    
    </summary>
    
      <category term="node" scheme="http://fuersite.coding.me/all-categories/node/"/>
    
    
      <category term="node" scheme="http://fuersite.coding.me/all-tags/node/"/>
    
      <category term="koa2" scheme="http://fuersite.coding.me/all-tags/koa2/"/>
    
  </entry>
  
  <entry>
    <title>nginx</title>
    <link href="http://fuersite.coding.me/2018/03/19/nginx/"/>
    <id>http://fuersite.coding.me/2018/03/19/nginx/</id>
    <published>2018-03-19T08:11:18.000Z</published>
    <updated>2019-08-28T01:21:26.074Z</updated>
    
    <content type="html"><![CDATA[<p>ngnix 使用与配置<br><a id="more"></a></p><ul><li><p>nginx.conf中三大主模块　event, http, mail：<br>低配版http server 配置，配置信息可以写入nginx.conf中http模块中，也可以写在外部文件，在http中引入,<br>一般安装后都会有一个default配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"># ubuntu, yii , nginx 配置</span><br><span class="line">server &#123;</span><br><span class="line"># 全局配置</span><br><span class="line">        #监听端口</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server ipv6only=on;</span><br><span class="line">　　　　＃项目更目录</span><br><span class="line">        root /home/t04759/workspace/yii-demo/advanced/frontend/web;</span><br><span class="line">        ＃首页文件</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">        # Make site accessible from http://localhost/</span><br><span class="line">        ＃　域名设置</span><br><span class="line">        server_name localhost;</span><br><span class="line"># 项目各级别目录配置</span><br><span class="line">　　　　＃　／ 表示根目录　配置</span><br><span class="line">        location / &#123;</span><br><span class="line">                root  /home/t04759/workspace/yii-demo/advanced/frontend/web;</span><br><span class="line">                index  index.html index.htm index.php;</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">                if (!-e $request_filename) &#123;</span><br><span class="line">                   rewrite  ^(.*)$  /index.php?s=$1  last;</span><br><span class="line">                   break;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">　＃php解析配置</span><br><span class="line">        location ~ \.php$ &#123;</span><br><span class="line">　　　　    #指定php的根目录</span><br><span class="line">                 root /home/t04759/workspace/yii-demo/advanced/frontend/web;</span><br><span class="line">        　　＃php5-fpm进行管理模块　默认9000端口，最好还是使用源文件地址</span><br><span class="line">                  fastcgi_pass unix:/var/run/php5-fpm.sock;</span><br><span class="line">                  #fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">            ＃入口文件</span><br><span class="line">                  fastcgi_index index.php;</span><br><span class="line">                  fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">                  include fastcgi_params;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>存放位置</p><blockquote><p>nginx安装后，应用程序一般存放在/usr/sbin/nginx 或者　/usr/local/sbin/nginx<br>nginx.conf 一般存放在/usr/local/nginx/conf/nginx.conf 或者/etc/nginx/</p></blockquote></li><li><p>配置文件修改后启动<br>例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/sbin/nginx -t -c /usr/nginx/nginx.conf　//检查配置文件是否正确</span><br><span class="line"></span><br><span class="line">sudo service nginx  restart|reload  //重启</span><br><span class="line">sudo service php5-fpm restart|reload　//重启</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ngnix 使用与配置&lt;br&gt;
    
    </summary>
    
      <category term="server" scheme="http://fuersite.coding.me/all-categories/server/"/>
    
    
      <category term="server" scheme="http://fuersite.coding.me/all-tags/server/"/>
    
      <category term="服务端" scheme="http://fuersite.coding.me/all-tags/%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
    
      <category term="nginx" scheme="http://fuersite.coding.me/all-tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>js 常用开发操作</title>
    <link href="http://fuersite.coding.me/2018/02/26/jsUtil/"/>
    <id>http://fuersite.coding.me/2018/02/26/jsUtil/</id>
    <published>2018-02-26T07:40:53.000Z</published>
    <updated>2019-08-28T01:21:26.073Z</updated>
    
    <content type="html"><![CDATA[<p>DOM选择，数组排序， 遍历，　去重，　字符串处理，　类型转换，　正则表达式，　日期时间处理, 拷贝, 相等问题<br><a id="more"></a></p><h3 id="DOM-选择"><a href="#DOM-选择" class="headerlink" title="DOM 选择"></a>DOM 选择</h3><h4 id="js-元素选择器"><a href="#js-元素选择器" class="headerlink" title="js 元素选择器"></a>js 元素选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div name=&quot;divName&quot; id=&quot;divId&quot; class=&quot;divClass&quot;&gt; &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>getElementById()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var div = document.getElementById(&apos;DivId&apos;);</span><br></pre></td></tr></table></figure></p><p>getElementsByTagName()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var div = document.getElementsByTagName(&apos;div&apos;);</span><br></pre></td></tr></table></figure></p><p>getElementsByName()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var div = document.getElementsByName(&apos;divName&apos;);</span><br></pre></td></tr></table></figure></p><p>getElementsByClassName()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var div = document.getElementsByClassName(&apos;divClass&apos;);</span><br></pre></td></tr></table></figure></p><p> document.all 返回所有元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(document.all)</span><br></pre></td></tr></table></figure></p><h4 id="css-选择器"><a href="#css-选择器" class="headerlink" title="css 选择器"></a>css 选择器</h4><p>querySelector返回的是一个对象，querySelectorAll返回的一个集合(NodeList)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&quot;.divClass&quot;);</span><br><span class="line">document.querySelectorAll(&quot;.divClass&quot;)[0];</span><br></pre></td></tr></table></figure><h4 id="jquery选择器"><a href="#jquery选择器" class="headerlink" title="jquery选择器"></a>jquery选择器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 元素选择器</span><br><span class="line">$(&quot;p.intro&quot;) 选取所有 class=&quot;intro&quot; 的 &lt;p&gt; 元素。</span><br><span class="line">// 属性选择器</span><br><span class="line">$(&quot;[href=&apos;#&apos;]&quot;) 选取所有带有 href 值等于 &quot;#&quot; 的元素。</span><br><span class="line">// css选择器</span><br><span class="line">$(&quot;p&quot;).css(&quot;background-color&quot;,&quot;red&quot;);</span><br></pre></td></tr></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><h4 id="sort-默认排序顺序是根据字符串Unicode码-默认升序"><a href="#sort-默认排序顺序是根据字符串Unicode码-默认升序" class="headerlink" title="sort() 默认排序顺序是根据字符串Unicode码,默认升序"></a>sort() 默认排序顺序是根据字符串Unicode码,默认升序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [4,3,6,5,7,2,&apos;a&apos;];</span><br><span class="line">arr.sort();</span><br><span class="line">(7) [2, 3, 4, 5, 6, 7, &quot;a&quot;]</span><br></pre></td></tr></table></figure><h4 id="sort-function-a-b-自定义比较器"><a href="#sort-function-a-b-自定义比较器" class="headerlink" title="sort(function(a,b){})　自定义比较器"></a>sort(function(a,b){})　自定义比较器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.sort(function(a,b)&#123;</span><br><span class="line">return a - b;// 生序，　b-a 降序，升降根据返回正负；</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><h6 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a><code>快速排序</code></h6><p>js 实现１</p><pre><code>function quick(arr){  if(arr.length&lt;=1){    return arr;  }  var left = [];  var right = [];  var base = arr[0];  for(var i=1;i&lt;arr.length;i++)  {   // 判决条件    if(arr[i]&gt;base){      right.push(arr[i]);    }else {      left.push(arr[i])    }  }  return quick(left).concat(base,quick(right));}</code></pre><p>js 实现2</p><pre><code>let swap = function (arr, a, b) {  arr[a] = arr[a] ^ arr[b];  arr[b] = arr[a] ^ arr[b];  arr[a] = arr[a] ^ arr[b];}function partition(arr, start, end) {  let key = arr[end];  while (start &lt; end) {    while(start &lt; end &amp;&amp; arr[start] &lt;= key) {      start++;    }    if (arr[start] &gt; key) {      swap(arr, start, end);    }    while(start &lt; end &amp;&amp; arr[end] &gt; key) {      end--;    }    if (arr[end] &lt; key) {      swap(arr, start, end);    }  }  return start;}function quickSort(arr, start, end) {  if (start == end) return;  let index = partition(arr, start, end);  if (index &gt; start) {    quickSort(arr, start, index - 1);  }  if (index &lt; end) {    quickSort(arr, index + 1, end);  }}function sort(_arr) {  if(!((_arr instanceof Array) &amp;&amp; _arr.length)){    return _arr;  }  let arr = _arr.slice();  quickSort(arr, 0, arr.length - 1);  return arr;}let arr = [5,0,4,6,5,10,300,2];console.log(sort(arr));</code></pre><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p><font size="4" color="#A52A2A"><code>for in</code></font>适合遍历对象属性，输出键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var i in arr)&#123;</span><br><span class="line">　console.log(i+&apos;   &apos;+arr[i]);//这时的i为键值（string类型），非数组索引</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font size="4" color="#A52A2A"><code>for of</code> </font>遍历数组的每一项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(var value of Arr)&#123;</span><br><span class="line">    console.log(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><font size="4" color="#A52A2A"> <code>forEach()</code></font> 方法是ES5.1标准引入的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(function(v,i)&#123;//v==value　为arr项，i==index　为arr索引</span><br><span class="line">    console.log(i+&apos;  &apos;v );</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>ES6 提供三个新的方法—— <font size="4" color="#A52A2A"> <code>entries()，keys(), values()</code></font>——用于遍历数组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">for (let index of [&apos;a&apos;, &apos;b&apos;].keys()) &#123;</span><br><span class="line">  console.log(index);</span><br><span class="line">&#125;</span><br><span class="line">// 0</span><br><span class="line">// 1</span><br><span class="line"></span><br><span class="line">for (let elem of [&apos;a&apos;, &apos;b&apos;].values()) &#123;</span><br><span class="line">  console.log(elem);</span><br><span class="line">&#125;</span><br><span class="line">// &apos;a&apos;</span><br><span class="line">// &apos;b&apos;</span><br><span class="line"></span><br><span class="line">for (let [index, elem] of [&apos;a&apos;, &apos;b&apos;].entries()) &#123;</span><br><span class="line">  console.log(index, elem);</span><br><span class="line">&#125;</span><br><span class="line">// 0 &quot;a&quot;</span><br><span class="line">// 1 &quot;b&quot;</span><br></pre></td></tr></table></figure></p><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p>使用<code>indexOf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function unique1(array)&#123;</span><br><span class="line">var n = [];</span><br><span class="line">for(var i = 0; i &lt; array.length; i++)&#123;</span><br><span class="line">    if (n.indexOf(array[i]) == -1) n.push(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">   return n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6 <code>Set</code>集合去重<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var arr = [...new Set(array)]</span><br></pre></td></tr></table></figure></p><h3 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h3><h6 id="字符串与数组的分分合合"><a href="#字符串与数组的分分合合" class="headerlink" title="字符串与数组的分分合合"></a>字符串与数组的分分合合</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;字符串转数组&quot;;</span><br><span class="line">var arr = str.split(&quot;&quot;); //var arr=s1.split(&quot;，&quot;)　分割符</span><br><span class="line">//利用数组reverse()方法实现反转</span><br><span class="line">arr.reverse();</span><br><span class="line">//利用数组的join()方法转换为字符串</span><br><span class="line">var str = arr.join(&quot;&quot;);</span><br><span class="line">console.log(str);</span><br><span class="line">VM1224:3 组数转串符字</span><br></pre></td></tr></table></figure><h6 id="字符串替换-stringObject-replace-regexp-substr-replacement"><a href="#字符串替换-stringObject-replace-regexp-substr-replacement" class="headerlink" title="字符串替换　stringObject.replace(regexp/substr,replacement)"></a>字符串替换　stringObject.replace(regexp/substr,replacement)</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var str = &quot;AABBCC&quot;;</span><br><span class="line">var　newStr =  str.replace(/BB/, &apos;cc&apos;);</span><br><span class="line">console.log(newStr);</span><br><span class="line">VM1224:3 AAccCC</span><br></pre></td></tr></table></figure><h6 id="json字符串和json对象转换-JSON-parse-JSON-stringify"><a href="#json字符串和json对象转换-JSON-parse-JSON-stringify" class="headerlink" title="json字符串和json对象转换 JSON.parse, JSON.stringify"></a>json字符串和json对象转换 JSON.parse, JSON.stringify</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var str = &apos;&#123;&quot;name&quot;:&quot;ivin&quot;,&quot;age&quot;:&quot;24&quot;&#125;&apos;</span><br><span class="line">var object = JSON.parse(str);</span><br><span class="line">console.log(object);</span><br><span class="line">var string = JSON.stringify(object);</span><br><span class="line">console.log(staring);</span><br></pre></td></tr></table></figure><h3 id="相等问题"><a href="#相等问题" class="headerlink" title="相等问题"></a>相等问题</h3><p>== &amp; ===　&amp; != &amp; !== 进行字符串，整数类型比较<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let a = 2, b = &apos;2&apos;, c = 3;</span><br><span class="line">console.log(a == b); //　true，　值相等就行</span><br><span class="line">console.log(a === b); //　false, 类型也要相同</span><br><span class="line">console.log(a != c); //　true，　只要看值是否相同，</span><br><span class="line">console.log(a !==c ); // true，　值或者类型不相同　都返回true</span><br></pre></td></tr></table></figure></p><p>自定义比较数组是否相等(忽略类型和对象数组)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Array.prototype.equals = function (arr) &#123;</span><br><span class="line">    if (!arr) &#123; return false;&#125;</span><br><span class="line">    if (this.length !== arr.length) &#123; return false;&#125;</span><br><span class="line">    if (this.lenght === 0 &amp;&amp; arr.lenght === 0) &#123; return true;&#125;</span><br><span class="line">    for (var index in  arr) &#123;</span><br><span class="line">        if (this[index] instanceof Array &amp;&amp; arr[index] instanceof Array) &#123;</span><br><span class="line">            return this.[index].equals(arr[index]);</span><br><span class="line">        &#125; else if (this.[index] != arr[index]) &#123;</span><br><span class="line">          return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对象比较"><a href="#对象比较" class="headerlink" title="对象比较"></a>对象比较</h3><p>对象的比较个人认为最好是根据业务数据的情况量身定制，这个适用性的比较只能是玩玩</p><pre><code>Object.prototype.equals = function(object2) {    for (propName in this) {        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {            return false;        }        else if (typeof this[propName] != typeof object2[propName]) {            return false;        }    }    for(propName in object2) {        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {            return false;        }        else if (typeof this[propName] != typeof object2[propName]) {            return false;        }        if (this[propName] instanceof Array &amp;&amp; object2[propName] instanceof Array) {           if (!this[propName].equals(object2[propName]))                        return false;        }        else if (this[propName] instanceof Object &amp;&amp; object2[propName] instanceof Object) {           if (!this[propName].equals(object2[propName]))                        return false;        }        else if(this[propName] != object2[propName]) {           return false;        }    }    return true;}</code></pre><h3 id="拷贝-浅，深copy"><a href="#拷贝-浅，深copy" class="headerlink" title="拷贝(浅，深copy)"></a>拷贝(浅，深copy)</h3><p>普通变量赋值　var a = b;已经发生了拷贝.<br>引用类型变量赋值　var a = {name: ‘ivin’, age: ‘24’}, a获取到的是地址.<br>常用的引用类型拷贝有数组拷贝，对象拷贝．</p><p>数组拷贝方法一，利用slice()：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let array = [1,2,3,4];</span><br><span class="line">let newArray = array.slice();</span><br><span class="line">newArray[2] = &apos;apple&apos;;</span><br><span class="line">console.log(&apos;array:&apos;, array);</span><br><span class="line">console.log(&apos;newArray:&apos;, newArray);</span><br><span class="line">结果：</span><br><span class="line">array: (4) [1, 2, 3, 4]</span><br><span class="line">VM72:5 newArray: (4) [1, 2, &quot;apple&quot;, 4]</span><br></pre></td></tr></table></figure></p><p>对象浅拷贝方法一，for in 变量赋值给另外一个对象,但是对引用类型属性无效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var a = &#123;name: &apos;ivin&apos;, age:[2,3,4,5]&#125;;</span><br><span class="line">var b = &#123;&#125;;</span><br><span class="line">for (index in a) &#123;</span><br><span class="line">  b[index] = a[index];</span><br><span class="line">&#125;</span><br><span class="line">b.age[0] = 1;</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br><span class="line">结果：　如果ａ中的属性也是引用类型，那么赋值给ｂ后，b改变引用型属性，ａ也会改变．这就需要递归来赋值了</span><br></pre></td></tr></table></figure></p><p>对象浅拷贝方法二，　ES6　Object.assign方法用于对象的合并<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var target = &#123; a: 1 &#125;;</span><br><span class="line"></span><br><span class="line">var source1 = &#123; b: 2 &#125;;</span><br><span class="line">var source2 = &#123; c: 3 &#125;;</span><br><span class="line"></span><br><span class="line">Object.assign(target, source1, source2);</span><br><span class="line">target // &#123;a:1, b:2, c:3&#125;</span><br><span class="line">// 进行浅拷贝</span><br><span class="line">var target = &#123;&#125;;</span><br><span class="line">var source = &#123;name: &apos;ivin&apos;, age: [2,3,4,5]&#125;;</span><br><span class="line">Object.assign(target, source);</span><br><span class="line">target.aget[0] = 1;</span><br><span class="line">console.log(target);</span><br><span class="line">console.log(source);</span><br></pre></td></tr></table></figure></p><p>对象深拷贝<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function deepCopy(obj) &#123;</span><br><span class="line">    if (typeof obj != &apos;object&apos;) &#123;</span><br><span class="line">        return obj;</span><br><span class="line">    &#125;</span><br><span class="line">    if (obj instanceof Array) &#123;</span><br><span class="line">        return obj.slice();</span><br><span class="line">    &#125;</span><br><span class="line">    var newobj = &#123;&#125;;</span><br><span class="line">    for ( var attr in obj) &#123;</span><br><span class="line">        newobj[attr] = deepCopy(obj[attr]);</span><br><span class="line">    &#125;</span><br><span class="line">    return newobj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">null, undefined, &quot;&quot;, 0, -0, NaN</span><br><span class="line">//转换成布尔值是false， 剩下的全转化为 ==&gt;&gt; true;</span><br><span class="line">null, &quot;&quot;, false, , []</span><br><span class="line">//转换成数字是 ==&gt;&gt; 0;</span><br><span class="line">undefind, &quot;One&quot;, 一个非数字值的数组：[&quot;a&quot;], function()&#123;&#125;</span><br><span class="line">// 转化成数字是 ==&gt;&gt; NaN;</span><br><span class="line">true, 一个值为数字的数组：[1] , 是数字的字符串：&quot;1&quot;，</span><br><span class="line">//转换为数字是 ==&gt;&gt; 1;</span><br></pre></td></tr></table></figure><p>类型转换有显现跟隐性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Boolean(value) - 把给定的值转换成 Boolean 型；</span><br><span class="line">Number(value) - 把给定的值转换成数字（可以是整数或浮点数）；</span><br><span class="line">String(value) - 把给定的值转换成字符串；</span><br><span class="line">parseInt() - 转为Number 保留整数部分</span><br><span class="line">parseFloat() - 转为　Number</span><br><span class="line">valueOf()</span><br><span class="line">toString()</span><br></pre></td></tr></table></figure></p><p>Math 方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">let num = 1314.45;</span><br><span class="line">Math.floor(num); //向下取整</span><br><span class="line">Math.ceil(num); //向上取整</span><br><span class="line">Math.round(num); // 四舍五入</span><br></pre></td></tr></table></figure></p><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p>var expression = / pattern / flags</p><p><code>flag</code></p><ul><li><p>g：表示全局（global）模式，即模式将被应用于所有字符串，而非在发现第一个匹配项时立即停止；</p></li><li><p>i：表示不区分大小写（case-insensitive）模式，即在确定匹配项时忽略模式与字符串的大小写；</p></li><li><p>m：表示多行（multiline）模式，即在到达一行文本末尾时还会继续查找下一行中是否存在与模式匹配的项。</p></li></ul><p>创建RegExp实例两种方式<br>方式一：正则表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var pattern1 = /mom( and dad( and baby)?)?/gi</span><br></pre></td></tr></table></figure></p><p>方式二：RegExp 对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var pattern2 = new RegExp(&quot;mom( and dad( and baby)?)?&quot;, &quot;i&quot;);</span><br><span class="line">console.log(pattern2.toString()); // 输出：　/mom( and dad( and baby)?)?/gi;</span><br></pre></td></tr></table></figure></p><p>RegExp属性方法<br>pattern.exec(text); 把字符串进行切割分配，返回满足匹配的组项．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var text = &quot;mom and dad and baby&quot;;</span><br><span class="line">var pattern = /mom( and dad( and baby)?)?/gi;</span><br><span class="line"></span><br><span class="line">var matches = pattern.exec(text);</span><br><span class="line">alert(matches.index);     // 0</span><br><span class="line">alert(matches.input);     // &quot;mom and dad and baby&quot;</span><br><span class="line">alert(matches[0]);        // &quot;mom and dad and baby&quot;</span><br><span class="line">alert(matches[1]);        // &quot; and dad and baby&quot;</span><br><span class="line">alert(matches[2]);        // &quot; and baby&quot;</span><br></pre></td></tr></table></figure></p><p>pattern.test(text); 检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var text = &quot;mom and dad and baby&quot;;</span><br><span class="line">var pattern = /mom( and dad( and baby)?)?/gi;</span><br><span class="line"></span><br><span class="line">var test = pattern.test(text);</span><br><span class="line">console.log(test); // true</span><br></pre></td></tr></table></figure></p><p>字符串方法配合Regexp<br>string.search();//返回匹配patter在text的索引，用于检查字符是否在字符串中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var text = &quot;Visit Runoob!&quot;;</span><br><span class="line">var pattern＝/Runoob/;</span><br><span class="line">var n = text.search(pattern);　//　n = ６</span><br></pre></td></tr></table></figure></p><p>string.replace();<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var text = &quot;Visit Runoob!&quot;;</span><br><span class="line">var pattern＝/Runoob/g;</span><br><span class="line">var n = text.replace(pattern, &apos;world&apos;);　//　Visit word!</span><br></pre></td></tr></table></figure></p><h3 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h3><p>时间戳　转为　YYYY-MM-DD hh:mm:ss 格式，　前后端交互时最好传时间戳．<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">function getNowFormatDate(timestamp) &#123;</span><br><span class="line">    var date = timestamp? new Date(timestamp) : new Date();</span><br><span class="line">    var seperator1 = &quot;-&quot;;</span><br><span class="line">    var seperator2 = &quot;:&quot;;</span><br><span class="line">    var year = date.getFullYear();</span><br><span class="line">    var month = date.getMonth() + 1;</span><br><span class="line">    var strDate = date.getDate();</span><br><span class="line">    if (month &gt;= 1 &amp;&amp; month &lt;= 9) &#123;</span><br><span class="line">        month = &quot;0&quot; + month;</span><br><span class="line">    &#125;</span><br><span class="line">    if (strDate &gt;= 0 &amp;&amp; strDate &lt;= 9) &#123;</span><br><span class="line">        strDate = &quot;0&quot; + strDate;</span><br><span class="line">    &#125;</span><br><span class="line">    var currentdate = year + seperator1 + month + seperator1 + strDate</span><br><span class="line">            + &quot; &quot; + date.getHours() + seperator2 + date.getMinutes()</span><br><span class="line">            + seperator2 + date.getSeconds();</span><br><span class="line">    return currentdate;</span><br><span class="line">&#125;</span><br><span class="line">var now = new Date();</span><br><span class="line">var time = now.getTime();</span><br><span class="line">console.log(now);</span><br><span class="line">console.log(getNowFormatDate(time));</span><br><span class="line">结果：</span><br><span class="line">Sun Mar 11 2018 12:42:14 GMT+0800 (CST)</span><br><span class="line">VM11592:22 2018-03-11 12:42:14</span><br></pre></td></tr></table></figure></p><p>字符串转日期时间 YYYY-MM-DD hh:mm:ss<br>原生js,并没有提供转换的API，我们可以借用一个处理时间的库moment.js，<br><a href="http://momentjs.cn/" target="_blank" rel="noopener">http://momentjs.cn/</a>. 可以传入参数，moment(dataString).format(‘’)；<br>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(moment(&apos;Sun Mar 11 2018 14:09:20 GMT+0800 (CST)&apos;).format(&apos;L&apos;));</span><br><span class="line">// 2018-03-11</span><br></pre></td></tr></table></figure></p><p>API:<br>日期格式化<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">moment().format(&apos;MMMM Do YYYY, h:mm:ss a&apos;); // 三月 11日 2018, 1:05:34 下午</span><br><span class="line">moment().format(&apos;dddd&apos;);                    // 星期日</span><br><span class="line">moment().format(&quot;MMM Do YY&quot;);               // 3月 11日 18</span><br><span class="line">moment().format(&apos;YYYY [escaped] YYYY&apos;);     // 2018 escaped 2018</span><br><span class="line">moment().format();                          // 2018-03-11T13:05:34+08:00</span><br><span class="line">相对时间</span><br><span class="line">moment(&quot;20111031&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 6 年前</span><br><span class="line">moment(&quot;20120620&quot;, &quot;YYYYMMDD&quot;).fromNow(); // 6 年前</span><br><span class="line">moment().startOf(&apos;day&apos;).fromNow();        // 13 小时前</span><br><span class="line">moment().endOf(&apos;day&apos;).fromNow();          // 11 小时内</span><br><span class="line">moment().startOf(&apos;hour&apos;).fromNow();       // 6 分钟前</span><br></pre></td></tr></table></figure></p><p>日历时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">moment().subtract(10, &apos;days&apos;).calendar(); // 2018年3月1日</span><br><span class="line">moment().subtract(6, &apos;days&apos;).calendar();  // 本周一下午1点05</span><br><span class="line">moment().subtract(3, &apos;days&apos;).calendar();  // 本周四下午1点05</span><br><span class="line">moment().subtract(1, &apos;days&apos;).calendar();  // 昨天下午1点05分</span><br><span class="line">moment().calendar();                      // 今天下午1点05分</span><br><span class="line">moment().add(1, &apos;days&apos;).calendar();       // 明天下午1点05分</span><br><span class="line">moment().add(3, &apos;days&apos;).calendar();       // 下周三下午1点05</span><br><span class="line">moment().add(10, &apos;days&apos;).calendar();      // 2018年3月21日</span><br></pre></td></tr></table></figure></p><p>多语言支持<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">moment().format(&apos;L&apos;);    // 2018-03-11</span><br><span class="line">moment().format(&apos;l&apos;);    // 2018-03-11</span><br><span class="line">moment().format(&apos;LL&apos;);   // 2018年3月11日</span><br><span class="line">moment().format(&apos;ll&apos;);   // 2018年3月11日</span><br><span class="line">moment().format(&apos;LLL&apos;);  // 2018年3月11日下午1点05分</span><br><span class="line">moment().format(&apos;lll&apos;);  // 2018年3月11日下午1点05分</span><br><span class="line">moment().format(&apos;LLLL&apos;); // 2018年3月11日星期日下午1点05分</span><br><span class="line">moment().format(&apos;llll&apos;); // 2018年3月11日星期日下午1点05分</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;DOM选择，数组排序， 遍历，　去重，　字符串处理，　类型转换，　正则表达式，　日期时间处理, 拷贝, 相等问题&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://fuersite.coding.me/all-tags/javascript/"/>
    
      <category term="日期处理" scheme="http://fuersite.coding.me/all-tags/%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/"/>
    
      <category term="遍历" scheme="http://fuersite.coding.me/all-tags/%E9%81%8D%E5%8E%86/"/>
    
      <category term="正则表达式" scheme="http://fuersite.coding.me/all-tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
